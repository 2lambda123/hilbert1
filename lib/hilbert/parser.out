Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> VAR = term
Rule 3     statement -> FUNC_VAR ( term ) = term
Rule 4     statement -> FUNC_VAR ( terms_with_cln ) = term
Rule 5     expression -> term
Rule 6     expression -> FUNC_VAR
Rule 7     term -> FUNC_VAR ( term )
Rule 8     term -> FUNC_VAR ( terms_with_cln )
Rule 9     term -> d / d VAR ( term )
Rule 10    term -> d FUNC_VAR / d VAR
Rule 11    term -> S ( term d VAR )
Rule 12    term -> S ( FUNC_VAR d VAR )
Rule 13    term -> BUILD_IN_FUNC ( term )
Rule 14    term -> CONSTANTS
Rule 15    term -> term + term
Rule 16    term -> term - term
Rule 17    term -> term * term
Rule 18    term -> term / term
Rule 19    term -> term ^ term
Rule 20    term -> - term
Rule 21    term -> NUMBER
Rule 22    term -> VAR
Rule 23    term -> term VAR
Rule 24    term -> LIMIT_SYM [ term R_ARROW term ] ( term )
Rule 25    terms_with_cln -> term , term
Rule 26    terms_with_cln -> terms_with_cln , term

Terminals, with rules where they appear

(                    : 3 4 7 8 9 11 12 13 24
)                    : 3 4 7 8 9 11 12 13 24
*                    : 17
+                    : 15
,                    : 25 26
-                    : 16 20
/                    : 9 10 18
=                    : 2 3 4
BUILD_IN_FUNC        : 13
CONSTANTS            : 14
FUNC_VAR             : 3 4 6 7 8 10 12
LIMIT_SYM            : 24
NUMBER               : 21
R_ARROW              : 24
S                    : 11 12
VAR                  : 2 9 10 11 12 22 23
[                    : 24
]                    : 24
^                    : 19
d                    : 9 9 10 10 11 12
error                : 

Nonterminals, with rules where they appear

expression           : 1
statement            : 0
term                 : 2 3 3 4 5 7 9 11 13 15 15 16 16 17 17 18 18 19 19 20 23 24 24 24 25 25 26
terms_with_cln       : 4 8 26

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . VAR = term
    (3) statement -> . FUNC_VAR ( term ) = term
    (4) statement -> . FUNC_VAR ( terms_with_cln ) = term
    (5) expression -> . term
    (6) expression -> . FUNC_VAR
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    VAR             shift and go to state 11
    FUNC_VAR        shift and go to state 10
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    LIMIT_SYM       shift and go to state 1

    expression                     shift and go to state 2
    statement                      shift and go to state 3
    term                           shift and go to state 5

state 1

    (24) term -> LIMIT_SYM . [ term R_ARROW term ] ( term )

    [               shift and go to state 13


state 2

    (1) statement -> expression .

    $end            reduce using rule 1 (statement -> expression .)


state 3

    (0) S' -> statement .



state 4

    (9) term -> d . / d VAR ( term )
    (10) term -> d . FUNC_VAR / d VAR

    /               shift and go to state 14
    FUNC_VAR        shift and go to state 15


state 5

    (5) expression -> term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    $end            reduce using rule 5 (expression -> term .)
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 6

    (21) term -> NUMBER .

    R_ARROW         reduce using rule 21 (term -> NUMBER .)
    +               reduce using rule 21 (term -> NUMBER .)
    -               reduce using rule 21 (term -> NUMBER .)
    *               reduce using rule 21 (term -> NUMBER .)
    /               reduce using rule 21 (term -> NUMBER .)
    ^               reduce using rule 21 (term -> NUMBER .)
    VAR             reduce using rule 21 (term -> NUMBER .)
    $end            reduce using rule 21 (term -> NUMBER .)
    )               reduce using rule 21 (term -> NUMBER .)
    ,               reduce using rule 21 (term -> NUMBER .)
    d               reduce using rule 21 (term -> NUMBER .)
    ]               reduce using rule 21 (term -> NUMBER .)


state 7

    (20) term -> - . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 22

state 8

    (14) term -> CONSTANTS .

    R_ARROW         reduce using rule 14 (term -> CONSTANTS .)
    +               reduce using rule 14 (term -> CONSTANTS .)
    -               reduce using rule 14 (term -> CONSTANTS .)
    *               reduce using rule 14 (term -> CONSTANTS .)
    /               reduce using rule 14 (term -> CONSTANTS .)
    ^               reduce using rule 14 (term -> CONSTANTS .)
    VAR             reduce using rule 14 (term -> CONSTANTS .)
    $end            reduce using rule 14 (term -> CONSTANTS .)
    )               reduce using rule 14 (term -> CONSTANTS .)
    ,               reduce using rule 14 (term -> CONSTANTS .)
    d               reduce using rule 14 (term -> CONSTANTS .)
    ]               reduce using rule 14 (term -> CONSTANTS .)


state 9

    (13) term -> BUILD_IN_FUNC . ( term )

    (               shift and go to state 25


state 10

    (3) statement -> FUNC_VAR . ( term ) = term
    (4) statement -> FUNC_VAR . ( terms_with_cln ) = term
    (6) expression -> FUNC_VAR .
    (7) term -> FUNC_VAR . ( term )
    (8) term -> FUNC_VAR . ( terms_with_cln )

    (               shift and go to state 26
    $end            reduce using rule 6 (expression -> FUNC_VAR .)


state 11

    (2) statement -> VAR . = term
    (22) term -> VAR .

    =               shift and go to state 27
    +               reduce using rule 22 (term -> VAR .)
    -               reduce using rule 22 (term -> VAR .)
    *               reduce using rule 22 (term -> VAR .)
    /               reduce using rule 22 (term -> VAR .)
    ^               reduce using rule 22 (term -> VAR .)
    VAR             reduce using rule 22 (term -> VAR .)
    $end            reduce using rule 22 (term -> VAR .)


state 12

    (11) term -> S . ( term d VAR )
    (12) term -> S . ( FUNC_VAR d VAR )

    (               shift and go to state 28


state 13

    (24) term -> LIMIT_SYM [ . term R_ARROW term ] ( term )
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 29

state 14

    (9) term -> d / . d VAR ( term )

    d               shift and go to state 30


state 15

    (10) term -> d FUNC_VAR . / d VAR

    /               shift and go to state 31


state 16

    (17) term -> term * . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 32

state 17

    (16) term -> term - . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 33

state 18

    (23) term -> term VAR .

    R_ARROW         reduce using rule 23 (term -> term VAR .)
    +               reduce using rule 23 (term -> term VAR .)
    -               reduce using rule 23 (term -> term VAR .)
    *               reduce using rule 23 (term -> term VAR .)
    /               reduce using rule 23 (term -> term VAR .)
    ^               reduce using rule 23 (term -> term VAR .)
    VAR             reduce using rule 23 (term -> term VAR .)
    $end            reduce using rule 23 (term -> term VAR .)
    )               reduce using rule 23 (term -> term VAR .)
    ,               reduce using rule 23 (term -> term VAR .)
    d               reduce using rule 23 (term -> term VAR .)
    ]               reduce using rule 23 (term -> term VAR .)


state 19

    (19) term -> term ^ . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 34

state 20

    (18) term -> term / . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 35

state 21

    (15) term -> term + . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 36

state 22

    (20) term -> - term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    R_ARROW         reduce using rule 20 (term -> - term .)
    +               reduce using rule 20 (term -> - term .)
    -               reduce using rule 20 (term -> - term .)
    *               reduce using rule 20 (term -> - term .)
    /               reduce using rule 20 (term -> - term .)
    ^               reduce using rule 20 (term -> - term .)
    VAR             reduce using rule 20 (term -> - term .)
    $end            reduce using rule 20 (term -> - term .)
    )               reduce using rule 20 (term -> - term .)
    ,               reduce using rule 20 (term -> - term .)
    d               reduce using rule 20 (term -> - term .)
    ]               reduce using rule 20 (term -> - term .)

  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 20 ]
  ! ^               [ shift and go to state 19 ]
  ! VAR             [ shift and go to state 18 ]


state 23

    (7) term -> FUNC_VAR . ( term )
    (8) term -> FUNC_VAR . ( terms_with_cln )

    (               shift and go to state 37


state 24

    (22) term -> VAR .

    R_ARROW         reduce using rule 22 (term -> VAR .)
    +               reduce using rule 22 (term -> VAR .)
    -               reduce using rule 22 (term -> VAR .)
    *               reduce using rule 22 (term -> VAR .)
    /               reduce using rule 22 (term -> VAR .)
    ^               reduce using rule 22 (term -> VAR .)
    VAR             reduce using rule 22 (term -> VAR .)
    $end            reduce using rule 22 (term -> VAR .)
    )               reduce using rule 22 (term -> VAR .)
    ,               reduce using rule 22 (term -> VAR .)
    d               reduce using rule 22 (term -> VAR .)
    ]               reduce using rule 22 (term -> VAR .)


state 25

    (13) term -> BUILD_IN_FUNC ( . term )
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 38

state 26

    (3) statement -> FUNC_VAR ( . term ) = term
    (4) statement -> FUNC_VAR ( . terms_with_cln ) = term
    (7) term -> FUNC_VAR ( . term )
    (8) term -> FUNC_VAR ( . terms_with_cln )
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )
    (25) terms_with_cln -> . term , term
    (26) terms_with_cln -> . terms_with_cln , term

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    terms_with_cln                 shift and go to state 39
    term                           shift and go to state 40

state 27

    (2) statement -> VAR = . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 41

state 28

    (11) term -> S ( . term d VAR )
    (12) term -> S ( . FUNC_VAR d VAR )
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 43
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 42

state 29

    (24) term -> LIMIT_SYM [ term . R_ARROW term ] ( term )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    R_ARROW         shift and go to state 44
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 30

    (9) term -> d / d . VAR ( term )

    VAR             shift and go to state 45


state 31

    (10) term -> d FUNC_VAR / . d VAR

    d               shift and go to state 46


state 32

    (17) term -> term * term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    R_ARROW         reduce using rule 17 (term -> term * term .)
    +               reduce using rule 17 (term -> term * term .)
    -               reduce using rule 17 (term -> term * term .)
    *               reduce using rule 17 (term -> term * term .)
    /               reduce using rule 17 (term -> term * term .)
    ^               reduce using rule 17 (term -> term * term .)
    VAR             reduce using rule 17 (term -> term * term .)
    $end            reduce using rule 17 (term -> term * term .)
    )               reduce using rule 17 (term -> term * term .)
    ,               reduce using rule 17 (term -> term * term .)
    d               reduce using rule 17 (term -> term * term .)
    ]               reduce using rule 17 (term -> term * term .)

  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 20 ]
  ! ^               [ shift and go to state 19 ]
  ! VAR             [ shift and go to state 18 ]


state 33

    (16) term -> term - term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    R_ARROW         reduce using rule 16 (term -> term - term .)
    +               reduce using rule 16 (term -> term - term .)
    -               reduce using rule 16 (term -> term - term .)
    ^               reduce using rule 16 (term -> term - term .)
    VAR             reduce using rule 16 (term -> term - term .)
    $end            reduce using rule 16 (term -> term - term .)
    )               reduce using rule 16 (term -> term - term .)
    ,               reduce using rule 16 (term -> term - term .)
    d               reduce using rule 16 (term -> term - term .)
    ]               reduce using rule 16 (term -> term - term .)
    *               shift and go to state 16
    /               shift and go to state 20

  ! *               [ reduce using rule 16 (term -> term - term .) ]
  ! /               [ reduce using rule 16 (term -> term - term .) ]
  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 17 ]
  ! ^               [ shift and go to state 19 ]
  ! VAR             [ shift and go to state 18 ]


state 34

    (19) term -> term ^ term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    R_ARROW         reduce using rule 19 (term -> term ^ term .)
    $end            reduce using rule 19 (term -> term ^ term .)
    )               reduce using rule 19 (term -> term ^ term .)
    ,               reduce using rule 19 (term -> term ^ term .)
    d               reduce using rule 19 (term -> term ^ term .)
    ]               reduce using rule 19 (term -> term ^ term .)
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18

  ! +               [ reduce using rule 19 (term -> term ^ term .) ]
  ! -               [ reduce using rule 19 (term -> term ^ term .) ]
  ! *               [ reduce using rule 19 (term -> term ^ term .) ]
  ! /               [ reduce using rule 19 (term -> term ^ term .) ]
  ! ^               [ reduce using rule 19 (term -> term ^ term .) ]
  ! VAR             [ reduce using rule 19 (term -> term ^ term .) ]


state 35

    (18) term -> term / term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    R_ARROW         reduce using rule 18 (term -> term / term .)
    +               reduce using rule 18 (term -> term / term .)
    -               reduce using rule 18 (term -> term / term .)
    *               reduce using rule 18 (term -> term / term .)
    /               reduce using rule 18 (term -> term / term .)
    ^               reduce using rule 18 (term -> term / term .)
    VAR             reduce using rule 18 (term -> term / term .)
    $end            reduce using rule 18 (term -> term / term .)
    )               reduce using rule 18 (term -> term / term .)
    ,               reduce using rule 18 (term -> term / term .)
    d               reduce using rule 18 (term -> term / term .)
    ]               reduce using rule 18 (term -> term / term .)

  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 20 ]
  ! ^               [ shift and go to state 19 ]
  ! VAR             [ shift and go to state 18 ]


state 36

    (15) term -> term + term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    R_ARROW         reduce using rule 15 (term -> term + term .)
    +               reduce using rule 15 (term -> term + term .)
    -               reduce using rule 15 (term -> term + term .)
    ^               reduce using rule 15 (term -> term + term .)
    VAR             reduce using rule 15 (term -> term + term .)
    $end            reduce using rule 15 (term -> term + term .)
    )               reduce using rule 15 (term -> term + term .)
    ,               reduce using rule 15 (term -> term + term .)
    d               reduce using rule 15 (term -> term + term .)
    ]               reduce using rule 15 (term -> term + term .)
    *               shift and go to state 16
    /               shift and go to state 20

  ! *               [ reduce using rule 15 (term -> term + term .) ]
  ! /               [ reduce using rule 15 (term -> term + term .) ]
  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 17 ]
  ! ^               [ shift and go to state 19 ]
  ! VAR             [ shift and go to state 18 ]


state 37

    (7) term -> FUNC_VAR ( . term )
    (8) term -> FUNC_VAR ( . terms_with_cln )
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )
    (25) terms_with_cln -> . term , term
    (26) terms_with_cln -> . terms_with_cln , term

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    terms_with_cln                 shift and go to state 48
    term                           shift and go to state 47

state 38

    (13) term -> BUILD_IN_FUNC ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    )               shift and go to state 49
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 39

    (4) statement -> FUNC_VAR ( terms_with_cln . ) = term
    (8) term -> FUNC_VAR ( terms_with_cln . )
    (26) terms_with_cln -> terms_with_cln . , term

    )               shift and go to state 50
    ,               shift and go to state 51


state 40

    (3) statement -> FUNC_VAR ( term . ) = term
    (7) term -> FUNC_VAR ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR
    (25) terms_with_cln -> term . , term

    )               shift and go to state 53
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18
    ,               shift and go to state 52


state 41

    (2) statement -> VAR = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    $end            reduce using rule 2 (statement -> VAR = term .)
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 42

    (11) term -> S ( term . d VAR )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    d               shift and go to state 54
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 43

    (12) term -> S ( FUNC_VAR . d VAR )
    (7) term -> FUNC_VAR . ( term )
    (8) term -> FUNC_VAR . ( terms_with_cln )

    d               shift and go to state 55
    (               shift and go to state 37


state 44

    (24) term -> LIMIT_SYM [ term R_ARROW . term ] ( term )
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 56

state 45

    (9) term -> d / d VAR . ( term )

    (               shift and go to state 57


state 46

    (10) term -> d FUNC_VAR / d . VAR

    VAR             shift and go to state 58


state 47

    (7) term -> FUNC_VAR ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR
    (25) terms_with_cln -> term . , term

    )               shift and go to state 59
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18
    ,               shift and go to state 52


state 48

    (8) term -> FUNC_VAR ( terms_with_cln . )
    (26) terms_with_cln -> terms_with_cln . , term

    )               shift and go to state 60
    ,               shift and go to state 51


state 49

    (13) term -> BUILD_IN_FUNC ( term ) .

    R_ARROW         reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    +               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    -               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    *               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    /               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    ^               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    VAR             reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    $end            reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    )               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    ,               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    d               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    ]               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)


state 50

    (4) statement -> FUNC_VAR ( terms_with_cln ) . = term
    (8) term -> FUNC_VAR ( terms_with_cln ) .

    =               shift and go to state 61
    +               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    -               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    *               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    /               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    ^               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    VAR             reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    $end            reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)


state 51

    (26) terms_with_cln -> terms_with_cln , . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 62

state 52

    (25) terms_with_cln -> term , . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 63

state 53

    (3) statement -> FUNC_VAR ( term ) . = term
    (7) term -> FUNC_VAR ( term ) .

    =               shift and go to state 64
    +               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    -               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    *               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    /               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    ^               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    VAR             reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    $end            reduce using rule 7 (term -> FUNC_VAR ( term ) .)


state 54

    (11) term -> S ( term d . VAR )

    VAR             shift and go to state 65


state 55

    (12) term -> S ( FUNC_VAR d . VAR )

    VAR             shift and go to state 66


state 56

    (24) term -> LIMIT_SYM [ term R_ARROW term . ] ( term )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    ]               shift and go to state 67
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 57

    (9) term -> d / d VAR ( . term )
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 68

state 58

    (10) term -> d FUNC_VAR / d VAR .

    R_ARROW         reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    +               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    -               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    *               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    /               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    ^               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    VAR             reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    $end            reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    )               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    ,               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    d               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    ]               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)


state 59

    (7) term -> FUNC_VAR ( term ) .

    R_ARROW         reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    +               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    -               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    *               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    /               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    ^               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    VAR             reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    $end            reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    )               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    ,               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    d               reduce using rule 7 (term -> FUNC_VAR ( term ) .)
    ]               reduce using rule 7 (term -> FUNC_VAR ( term ) .)


state 60

    (8) term -> FUNC_VAR ( terms_with_cln ) .

    R_ARROW         reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    +               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    -               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    *               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    /               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    ^               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    VAR             reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    $end            reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    )               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    ,               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    d               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)
    ]               reduce using rule 8 (term -> FUNC_VAR ( terms_with_cln ) .)


state 61

    (4) statement -> FUNC_VAR ( terms_with_cln ) = . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 69

state 62

    (26) terms_with_cln -> terms_with_cln , term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    )               reduce using rule 26 (terms_with_cln -> terms_with_cln , term .)
    ,               reduce using rule 26 (terms_with_cln -> terms_with_cln , term .)
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 63

    (25) terms_with_cln -> term , term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    )               reduce using rule 25 (terms_with_cln -> term , term .)
    ,               reduce using rule 25 (terms_with_cln -> term , term .)
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 64

    (3) statement -> FUNC_VAR ( term ) = . term
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 70

state 65

    (11) term -> S ( term d VAR . )

    )               shift and go to state 71


state 66

    (12) term -> S ( FUNC_VAR d VAR . )

    )               shift and go to state 72


state 67

    (24) term -> LIMIT_SYM [ term R_ARROW term ] . ( term )

    (               shift and go to state 73


state 68

    (9) term -> d / d VAR ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    )               shift and go to state 74
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 69

    (4) statement -> FUNC_VAR ( terms_with_cln ) = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    $end            reduce using rule 4 (statement -> FUNC_VAR ( terms_with_cln ) = term .)
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 70

    (3) statement -> FUNC_VAR ( term ) = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    $end            reduce using rule 3 (statement -> FUNC_VAR ( term ) = term .)
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 71

    (11) term -> S ( term d VAR ) .

    R_ARROW         reduce using rule 11 (term -> S ( term d VAR ) .)
    +               reduce using rule 11 (term -> S ( term d VAR ) .)
    -               reduce using rule 11 (term -> S ( term d VAR ) .)
    *               reduce using rule 11 (term -> S ( term d VAR ) .)
    /               reduce using rule 11 (term -> S ( term d VAR ) .)
    ^               reduce using rule 11 (term -> S ( term d VAR ) .)
    VAR             reduce using rule 11 (term -> S ( term d VAR ) .)
    $end            reduce using rule 11 (term -> S ( term d VAR ) .)
    )               reduce using rule 11 (term -> S ( term d VAR ) .)
    ,               reduce using rule 11 (term -> S ( term d VAR ) .)
    d               reduce using rule 11 (term -> S ( term d VAR ) .)
    ]               reduce using rule 11 (term -> S ( term d VAR ) .)


state 72

    (12) term -> S ( FUNC_VAR d VAR ) .

    R_ARROW         reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    +               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    -               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    *               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    /               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    ^               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    VAR             reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    $end            reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    )               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    ,               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    d               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    ]               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)


state 73

    (24) term -> LIMIT_SYM [ term R_ARROW term ] ( . term )
    (7) term -> . FUNC_VAR ( term )
    (8) term -> . FUNC_VAR ( terms_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . NUMBER
    (22) term -> . VAR
    (23) term -> . term VAR
    (24) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 23
    d               shift and go to state 4
    S               shift and go to state 12
    BUILD_IN_FUNC   shift and go to state 9
    CONSTANTS       shift and go to state 8
    -               shift and go to state 7
    NUMBER          shift and go to state 6
    VAR             shift and go to state 24
    LIMIT_SYM       shift and go to state 1

    term                           shift and go to state 75

state 74

    (9) term -> d / d VAR ( term ) .

    R_ARROW         reduce using rule 9 (term -> d / d VAR ( term ) .)
    +               reduce using rule 9 (term -> d / d VAR ( term ) .)
    -               reduce using rule 9 (term -> d / d VAR ( term ) .)
    *               reduce using rule 9 (term -> d / d VAR ( term ) .)
    /               reduce using rule 9 (term -> d / d VAR ( term ) .)
    ^               reduce using rule 9 (term -> d / d VAR ( term ) .)
    VAR             reduce using rule 9 (term -> d / d VAR ( term ) .)
    $end            reduce using rule 9 (term -> d / d VAR ( term ) .)
    )               reduce using rule 9 (term -> d / d VAR ( term ) .)
    ,               reduce using rule 9 (term -> d / d VAR ( term ) .)
    d               reduce using rule 9 (term -> d / d VAR ( term ) .)
    ]               reduce using rule 9 (term -> d / d VAR ( term ) .)


state 75

    (24) term -> LIMIT_SYM [ term R_ARROW term ] ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (23) term -> term . VAR

    )               shift and go to state 76
    +               shift and go to state 21
    -               shift and go to state 17
    *               shift and go to state 16
    /               shift and go to state 20
    ^               shift and go to state 19
    VAR             shift and go to state 18


state 76

    (24) term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .

    R_ARROW         reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    +               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    -               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    *               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    /               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    ^               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    VAR             reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    $end            reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    )               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    ,               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    d               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    ]               reduce using rule 24 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 34 resolved as shift
WARNING: shift/reduce conflict for - in state 34 resolved as shift
WARNING: shift/reduce conflict for * in state 34 resolved as shift
WARNING: shift/reduce conflict for / in state 34 resolved as shift
WARNING: shift/reduce conflict for ^ in state 34 resolved as shift
WARNING: shift/reduce conflict for VAR in state 34 resolved as shift
