Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR = term
Rule 2     statement -> expression
Rule 3     statement -> FUNC_VAR ( VAR ) = term
Rule 4     statement -> FUNC_VAR ( vars_with_cln ) = term
Rule 5     expression -> term
Rule 6     expression -> FUNC_VAR
Rule 7     term -> FUNC_VAR ( NUMBER )
Rule 8     term -> FUNC_VAR ( nums_with_cln )
Rule 9     term -> d / d VAR ( term )
Rule 10    term -> d FUNC_VAR / d VAR
Rule 11    term -> S ( term d VAR )
Rule 12    term -> S ( FUNC_VAR d VAR )
Rule 13    term -> BUILD_IN_FUNC ( term )
Rule 14    term -> CONSTANTS
Rule 15    term -> term + term
Rule 16    term -> term - term
Rule 17    term -> term * term
Rule 18    term -> term / term
Rule 19    term -> term ^ term
Rule 20    term -> - term
Rule 21    term -> ( term )
Rule 22    term -> NUMBER
Rule 23    term -> e
Rule 24    term -> VAR
Rule 25    term -> term VAR
Rule 26    term -> LIMIT_SYM [ term R_ARROW term ] ( term )
Rule 27    vars_with_cln -> VAR , VAR
Rule 28    vars_with_cln -> vars_with_cln , VAR
Rule 29    nums_with_cln -> NUMBER , NUMBER
Rule 30    nums_with_cln -> nums_with_cln , NUMBER

Terminals, with rules where they appear

(                    : 3 4 7 8 9 11 12 13 21 26
)                    : 3 4 7 8 9 11 12 13 21 26
*                    : 17
+                    : 15
,                    : 27 28 29 30
-                    : 16 20
/                    : 9 10 18
=                    : 1 3 4
BUILD_IN_FUNC        : 13
CONSTANTS            : 14
FUNC_VAR             : 3 4 6 7 8 10 12
LIMIT_SYM            : 26
NUMBER               : 7 22 29 29 30
R_ARROW              : 26
S                    : 11 12
VAR                  : 1 3 9 10 11 12 24 25 27 27 28
[                    : 26
]                    : 26
^                    : 19
d                    : 9 9 10 10 11 12
e                    : 23
error                : 

Nonterminals, with rules where they appear

expression           : 2
nums_with_cln        : 8 30
statement            : 0
term                 : 1 3 4 5 9 11 13 15 15 16 16 17 17 18 18 19 19 20 21 25 26 26 26
vars_with_cln        : 4 28

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR = term
    (2) statement -> . expression
    (3) statement -> . FUNC_VAR ( VAR ) = term
    (4) statement -> . FUNC_VAR ( vars_with_cln ) = term
    (5) expression -> . term
    (6) expression -> . FUNC_VAR
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    VAR             shift and go to state 14
    FUNC_VAR        shift and go to state 12
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    LIMIT_SYM       shift and go to state 11

    statement                      shift and go to state 9
    expression                     shift and go to state 3
    term                           shift and go to state 5

state 1

    (20) term -> - . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 15

state 2

    (13) term -> BUILD_IN_FUNC . ( term )

    (               shift and go to state 18


state 3

    (2) statement -> expression .

    $end            reduce using rule 2 (statement -> expression .)


state 4

    (23) term -> e .

    +               reduce using rule 23 (term -> e .)
    -               reduce using rule 23 (term -> e .)
    *               reduce using rule 23 (term -> e .)
    /               reduce using rule 23 (term -> e .)
    ^               reduce using rule 23 (term -> e .)
    VAR             reduce using rule 23 (term -> e .)
    $end            reduce using rule 23 (term -> e .)
    )               reduce using rule 23 (term -> e .)
    R_ARROW         reduce using rule 23 (term -> e .)
    d               reduce using rule 23 (term -> e .)
    ]               reduce using rule 23 (term -> e .)


state 5

    (5) expression -> term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    $end            reduce using rule 5 (expression -> term .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 6

    (22) term -> NUMBER .

    +               reduce using rule 22 (term -> NUMBER .)
    -               reduce using rule 22 (term -> NUMBER .)
    *               reduce using rule 22 (term -> NUMBER .)
    /               reduce using rule 22 (term -> NUMBER .)
    ^               reduce using rule 22 (term -> NUMBER .)
    VAR             reduce using rule 22 (term -> NUMBER .)
    $end            reduce using rule 22 (term -> NUMBER .)
    )               reduce using rule 22 (term -> NUMBER .)
    R_ARROW         reduce using rule 22 (term -> NUMBER .)
    d               reduce using rule 22 (term -> NUMBER .)
    ]               reduce using rule 22 (term -> NUMBER .)


state 7

    (14) term -> CONSTANTS .

    +               reduce using rule 14 (term -> CONSTANTS .)
    -               reduce using rule 14 (term -> CONSTANTS .)
    *               reduce using rule 14 (term -> CONSTANTS .)
    /               reduce using rule 14 (term -> CONSTANTS .)
    ^               reduce using rule 14 (term -> CONSTANTS .)
    VAR             reduce using rule 14 (term -> CONSTANTS .)
    $end            reduce using rule 14 (term -> CONSTANTS .)
    )               reduce using rule 14 (term -> CONSTANTS .)
    R_ARROW         reduce using rule 14 (term -> CONSTANTS .)
    d               reduce using rule 14 (term -> CONSTANTS .)
    ]               reduce using rule 14 (term -> CONSTANTS .)


state 8

    (9) term -> d . / d VAR ( term )
    (10) term -> d . FUNC_VAR / d VAR

    /               shift and go to state 25
    FUNC_VAR        shift and go to state 26


state 9

    (0) S' -> statement .



state 10

    (21) term -> ( . term )
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 27

state 11

    (26) term -> LIMIT_SYM . [ term R_ARROW term ] ( term )

    [               shift and go to state 28


state 12

    (3) statement -> FUNC_VAR . ( VAR ) = term
    (4) statement -> FUNC_VAR . ( vars_with_cln ) = term
    (6) expression -> FUNC_VAR .
    (7) term -> FUNC_VAR . ( NUMBER )
    (8) term -> FUNC_VAR . ( nums_with_cln )

    (               shift and go to state 29
    $end            reduce using rule 6 (expression -> FUNC_VAR .)


state 13

    (11) term -> S . ( term d VAR )
    (12) term -> S . ( FUNC_VAR d VAR )

    (               shift and go to state 30


state 14

    (1) statement -> VAR . = term
    (24) term -> VAR .

    =               shift and go to state 31
    +               reduce using rule 24 (term -> VAR .)
    -               reduce using rule 24 (term -> VAR .)
    *               reduce using rule 24 (term -> VAR .)
    /               reduce using rule 24 (term -> VAR .)
    ^               reduce using rule 24 (term -> VAR .)
    VAR             reduce using rule 24 (term -> VAR .)
    $end            reduce using rule 24 (term -> VAR .)


state 15

    (20) term -> - term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    +               reduce using rule 20 (term -> - term .)
    -               reduce using rule 20 (term -> - term .)
    *               reduce using rule 20 (term -> - term .)
    /               reduce using rule 20 (term -> - term .)
    ^               reduce using rule 20 (term -> - term .)
    VAR             reduce using rule 20 (term -> - term .)
    $end            reduce using rule 20 (term -> - term .)
    )               reduce using rule 20 (term -> - term .)
    R_ARROW         reduce using rule 20 (term -> - term .)
    d               reduce using rule 20 (term -> - term .)
    ]               reduce using rule 20 (term -> - term .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 19 ]
  ! /               [ shift and go to state 22 ]
  ! ^               [ shift and go to state 20 ]
  ! VAR             [ shift and go to state 21 ]


state 16

    (7) term -> FUNC_VAR . ( NUMBER )
    (8) term -> FUNC_VAR . ( nums_with_cln )

    (               shift and go to state 32


state 17

    (24) term -> VAR .

    +               reduce using rule 24 (term -> VAR .)
    -               reduce using rule 24 (term -> VAR .)
    *               reduce using rule 24 (term -> VAR .)
    /               reduce using rule 24 (term -> VAR .)
    ^               reduce using rule 24 (term -> VAR .)
    VAR             reduce using rule 24 (term -> VAR .)
    $end            reduce using rule 24 (term -> VAR .)
    )               reduce using rule 24 (term -> VAR .)
    R_ARROW         reduce using rule 24 (term -> VAR .)
    d               reduce using rule 24 (term -> VAR .)
    ]               reduce using rule 24 (term -> VAR .)


state 18

    (13) term -> BUILD_IN_FUNC ( . term )
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 33

state 19

    (17) term -> term * . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 34

state 20

    (19) term -> term ^ . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 35

state 21

    (25) term -> term VAR .

    +               reduce using rule 25 (term -> term VAR .)
    -               reduce using rule 25 (term -> term VAR .)
    *               reduce using rule 25 (term -> term VAR .)
    /               reduce using rule 25 (term -> term VAR .)
    ^               reduce using rule 25 (term -> term VAR .)
    VAR             reduce using rule 25 (term -> term VAR .)
    $end            reduce using rule 25 (term -> term VAR .)
    )               reduce using rule 25 (term -> term VAR .)
    R_ARROW         reduce using rule 25 (term -> term VAR .)
    d               reduce using rule 25 (term -> term VAR .)
    ]               reduce using rule 25 (term -> term VAR .)


state 22

    (18) term -> term / . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 36

state 23

    (15) term -> term + . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 37

state 24

    (16) term -> term - . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 38

state 25

    (9) term -> d / . d VAR ( term )

    d               shift and go to state 39


state 26

    (10) term -> d FUNC_VAR . / d VAR

    /               shift and go to state 40


state 27

    (21) term -> ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    )               shift and go to state 41
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 28

    (26) term -> LIMIT_SYM [ . term R_ARROW term ] ( term )
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 42

state 29

    (3) statement -> FUNC_VAR ( . VAR ) = term
    (4) statement -> FUNC_VAR ( . vars_with_cln ) = term
    (7) term -> FUNC_VAR ( . NUMBER )
    (8) term -> FUNC_VAR ( . nums_with_cln )
    (27) vars_with_cln -> . VAR , VAR
    (28) vars_with_cln -> . vars_with_cln , VAR
    (29) nums_with_cln -> . NUMBER , NUMBER
    (30) nums_with_cln -> . nums_with_cln , NUMBER

    VAR             shift and go to state 46
    NUMBER          shift and go to state 43

    nums_with_cln                  shift and go to state 45
    vars_with_cln                  shift and go to state 44

state 30

    (11) term -> S ( . term d VAR )
    (12) term -> S ( . FUNC_VAR d VAR )
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 47
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 48

state 31

    (1) statement -> VAR = . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 49

state 32

    (7) term -> FUNC_VAR ( . NUMBER )
    (8) term -> FUNC_VAR ( . nums_with_cln )
    (29) nums_with_cln -> . NUMBER , NUMBER
    (30) nums_with_cln -> . nums_with_cln , NUMBER

    NUMBER          shift and go to state 43

    nums_with_cln                  shift and go to state 45

state 33

    (13) term -> BUILD_IN_FUNC ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    )               shift and go to state 50
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 34

    (17) term -> term * term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    +               reduce using rule 17 (term -> term * term .)
    -               reduce using rule 17 (term -> term * term .)
    *               reduce using rule 17 (term -> term * term .)
    /               reduce using rule 17 (term -> term * term .)
    ^               reduce using rule 17 (term -> term * term .)
    VAR             reduce using rule 17 (term -> term * term .)
    $end            reduce using rule 17 (term -> term * term .)
    )               reduce using rule 17 (term -> term * term .)
    R_ARROW         reduce using rule 17 (term -> term * term .)
    d               reduce using rule 17 (term -> term * term .)
    ]               reduce using rule 17 (term -> term * term .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 19 ]
  ! /               [ shift and go to state 22 ]
  ! ^               [ shift and go to state 20 ]
  ! VAR             [ shift and go to state 21 ]


state 35

    (19) term -> term ^ term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    $end            reduce using rule 19 (term -> term ^ term .)
    )               reduce using rule 19 (term -> term ^ term .)
    R_ARROW         reduce using rule 19 (term -> term ^ term .)
    d               reduce using rule 19 (term -> term ^ term .)
    ]               reduce using rule 19 (term -> term ^ term .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21

  ! +               [ reduce using rule 19 (term -> term ^ term .) ]
  ! -               [ reduce using rule 19 (term -> term ^ term .) ]
  ! *               [ reduce using rule 19 (term -> term ^ term .) ]
  ! /               [ reduce using rule 19 (term -> term ^ term .) ]
  ! ^               [ reduce using rule 19 (term -> term ^ term .) ]
  ! VAR             [ reduce using rule 19 (term -> term ^ term .) ]


state 36

    (18) term -> term / term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    +               reduce using rule 18 (term -> term / term .)
    -               reduce using rule 18 (term -> term / term .)
    *               reduce using rule 18 (term -> term / term .)
    /               reduce using rule 18 (term -> term / term .)
    ^               reduce using rule 18 (term -> term / term .)
    VAR             reduce using rule 18 (term -> term / term .)
    $end            reduce using rule 18 (term -> term / term .)
    )               reduce using rule 18 (term -> term / term .)
    R_ARROW         reduce using rule 18 (term -> term / term .)
    d               reduce using rule 18 (term -> term / term .)
    ]               reduce using rule 18 (term -> term / term .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 19 ]
  ! /               [ shift and go to state 22 ]
  ! ^               [ shift and go to state 20 ]
  ! VAR             [ shift and go to state 21 ]


state 37

    (15) term -> term + term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    +               reduce using rule 15 (term -> term + term .)
    -               reduce using rule 15 (term -> term + term .)
    ^               reduce using rule 15 (term -> term + term .)
    VAR             reduce using rule 15 (term -> term + term .)
    $end            reduce using rule 15 (term -> term + term .)
    )               reduce using rule 15 (term -> term + term .)
    R_ARROW         reduce using rule 15 (term -> term + term .)
    d               reduce using rule 15 (term -> term + term .)
    ]               reduce using rule 15 (term -> term + term .)
    *               shift and go to state 19
    /               shift and go to state 22

  ! *               [ reduce using rule 15 (term -> term + term .) ]
  ! /               [ reduce using rule 15 (term -> term + term .) ]
  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! ^               [ shift and go to state 20 ]
  ! VAR             [ shift and go to state 21 ]


state 38

    (16) term -> term - term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    +               reduce using rule 16 (term -> term - term .)
    -               reduce using rule 16 (term -> term - term .)
    ^               reduce using rule 16 (term -> term - term .)
    VAR             reduce using rule 16 (term -> term - term .)
    $end            reduce using rule 16 (term -> term - term .)
    )               reduce using rule 16 (term -> term - term .)
    R_ARROW         reduce using rule 16 (term -> term - term .)
    d               reduce using rule 16 (term -> term - term .)
    ]               reduce using rule 16 (term -> term - term .)
    *               shift and go to state 19
    /               shift and go to state 22

  ! *               [ reduce using rule 16 (term -> term - term .) ]
  ! /               [ reduce using rule 16 (term -> term - term .) ]
  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! ^               [ shift and go to state 20 ]
  ! VAR             [ shift and go to state 21 ]


state 39

    (9) term -> d / d . VAR ( term )

    VAR             shift and go to state 51


state 40

    (10) term -> d FUNC_VAR / . d VAR

    d               shift and go to state 52


state 41

    (21) term -> ( term ) .

    +               reduce using rule 21 (term -> ( term ) .)
    -               reduce using rule 21 (term -> ( term ) .)
    *               reduce using rule 21 (term -> ( term ) .)
    /               reduce using rule 21 (term -> ( term ) .)
    ^               reduce using rule 21 (term -> ( term ) .)
    VAR             reduce using rule 21 (term -> ( term ) .)
    $end            reduce using rule 21 (term -> ( term ) .)
    )               reduce using rule 21 (term -> ( term ) .)
    R_ARROW         reduce using rule 21 (term -> ( term ) .)
    d               reduce using rule 21 (term -> ( term ) .)
    ]               reduce using rule 21 (term -> ( term ) .)


state 42

    (26) term -> LIMIT_SYM [ term . R_ARROW term ] ( term )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    R_ARROW         shift and go to state 53
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 43

    (7) term -> FUNC_VAR ( NUMBER . )
    (29) nums_with_cln -> NUMBER . , NUMBER

    )               shift and go to state 55
    ,               shift and go to state 54


state 44

    (4) statement -> FUNC_VAR ( vars_with_cln . ) = term
    (28) vars_with_cln -> vars_with_cln . , VAR

    )               shift and go to state 57
    ,               shift and go to state 56


state 45

    (8) term -> FUNC_VAR ( nums_with_cln . )
    (30) nums_with_cln -> nums_with_cln . , NUMBER

    )               shift and go to state 59
    ,               shift and go to state 58


state 46

    (3) statement -> FUNC_VAR ( VAR . ) = term
    (27) vars_with_cln -> VAR . , VAR

    )               shift and go to state 61
    ,               shift and go to state 60


state 47

    (12) term -> S ( FUNC_VAR . d VAR )
    (7) term -> FUNC_VAR . ( NUMBER )
    (8) term -> FUNC_VAR . ( nums_with_cln )

    d               shift and go to state 62
    (               shift and go to state 32


state 48

    (11) term -> S ( term . d VAR )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    d               shift and go to state 63
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 49

    (1) statement -> VAR = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    $end            reduce using rule 1 (statement -> VAR = term .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 50

    (13) term -> BUILD_IN_FUNC ( term ) .

    +               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    -               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    *               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    /               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    ^               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    VAR             reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    $end            reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    )               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    R_ARROW         reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    d               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)
    ]               reduce using rule 13 (term -> BUILD_IN_FUNC ( term ) .)


state 51

    (9) term -> d / d VAR . ( term )

    (               shift and go to state 64


state 52

    (10) term -> d FUNC_VAR / d . VAR

    VAR             shift and go to state 65


state 53

    (26) term -> LIMIT_SYM [ term R_ARROW . term ] ( term )
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 66

state 54

    (29) nums_with_cln -> NUMBER , . NUMBER

    NUMBER          shift and go to state 67


state 55

    (7) term -> FUNC_VAR ( NUMBER ) .

    +               reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    -               reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    *               reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    /               reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    ^               reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    VAR             reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    $end            reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    )               reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    R_ARROW         reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    d               reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)
    ]               reduce using rule 7 (term -> FUNC_VAR ( NUMBER ) .)


state 56

    (28) vars_with_cln -> vars_with_cln , . VAR

    VAR             shift and go to state 68


state 57

    (4) statement -> FUNC_VAR ( vars_with_cln ) . = term

    =               shift and go to state 69


state 58

    (30) nums_with_cln -> nums_with_cln , . NUMBER

    NUMBER          shift and go to state 70


state 59

    (8) term -> FUNC_VAR ( nums_with_cln ) .

    +               reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    -               reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    *               reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    /               reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    ^               reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    VAR             reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    $end            reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    )               reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    R_ARROW         reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    d               reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)
    ]               reduce using rule 8 (term -> FUNC_VAR ( nums_with_cln ) .)


state 60

    (27) vars_with_cln -> VAR , . VAR

    VAR             shift and go to state 71


state 61

    (3) statement -> FUNC_VAR ( VAR ) . = term

    =               shift and go to state 72


state 62

    (12) term -> S ( FUNC_VAR d . VAR )

    VAR             shift and go to state 73


state 63

    (11) term -> S ( term d . VAR )

    VAR             shift and go to state 74


state 64

    (9) term -> d / d VAR ( . term )
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 75

state 65

    (10) term -> d FUNC_VAR / d VAR .

    +               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    -               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    *               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    /               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    ^               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    VAR             reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    $end            reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    )               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    R_ARROW         reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    d               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)
    ]               reduce using rule 10 (term -> d FUNC_VAR / d VAR .)


state 66

    (26) term -> LIMIT_SYM [ term R_ARROW term . ] ( term )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    ]               shift and go to state 76
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 67

    (29) nums_with_cln -> NUMBER , NUMBER .

    )               reduce using rule 29 (nums_with_cln -> NUMBER , NUMBER .)
    ,               reduce using rule 29 (nums_with_cln -> NUMBER , NUMBER .)


state 68

    (28) vars_with_cln -> vars_with_cln , VAR .

    )               reduce using rule 28 (vars_with_cln -> vars_with_cln , VAR .)
    ,               reduce using rule 28 (vars_with_cln -> vars_with_cln , VAR .)


state 69

    (4) statement -> FUNC_VAR ( vars_with_cln ) = . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 77

state 70

    (30) nums_with_cln -> nums_with_cln , NUMBER .

    )               reduce using rule 30 (nums_with_cln -> nums_with_cln , NUMBER .)
    ,               reduce using rule 30 (nums_with_cln -> nums_with_cln , NUMBER .)


state 71

    (27) vars_with_cln -> VAR , VAR .

    )               reduce using rule 27 (vars_with_cln -> VAR , VAR .)
    ,               reduce using rule 27 (vars_with_cln -> VAR , VAR .)


state 72

    (3) statement -> FUNC_VAR ( VAR ) = . term
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 78

state 73

    (12) term -> S ( FUNC_VAR d VAR . )

    )               shift and go to state 79


state 74

    (11) term -> S ( term d VAR . )

    )               shift and go to state 80


state 75

    (9) term -> d / d VAR ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    )               shift and go to state 81
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 76

    (26) term -> LIMIT_SYM [ term R_ARROW term ] . ( term )

    (               shift and go to state 82


state 77

    (4) statement -> FUNC_VAR ( vars_with_cln ) = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    $end            reduce using rule 4 (statement -> FUNC_VAR ( vars_with_cln ) = term .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 78

    (3) statement -> FUNC_VAR ( VAR ) = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    $end            reduce using rule 3 (statement -> FUNC_VAR ( VAR ) = term .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 79

    (12) term -> S ( FUNC_VAR d VAR ) .

    +               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    -               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    *               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    /               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    ^               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    VAR             reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    $end            reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    )               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    R_ARROW         reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    d               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)
    ]               reduce using rule 12 (term -> S ( FUNC_VAR d VAR ) .)


state 80

    (11) term -> S ( term d VAR ) .

    +               reduce using rule 11 (term -> S ( term d VAR ) .)
    -               reduce using rule 11 (term -> S ( term d VAR ) .)
    *               reduce using rule 11 (term -> S ( term d VAR ) .)
    /               reduce using rule 11 (term -> S ( term d VAR ) .)
    ^               reduce using rule 11 (term -> S ( term d VAR ) .)
    VAR             reduce using rule 11 (term -> S ( term d VAR ) .)
    $end            reduce using rule 11 (term -> S ( term d VAR ) .)
    )               reduce using rule 11 (term -> S ( term d VAR ) .)
    R_ARROW         reduce using rule 11 (term -> S ( term d VAR ) .)
    d               reduce using rule 11 (term -> S ( term d VAR ) .)
    ]               reduce using rule 11 (term -> S ( term d VAR ) .)


state 81

    (9) term -> d / d VAR ( term ) .

    +               reduce using rule 9 (term -> d / d VAR ( term ) .)
    -               reduce using rule 9 (term -> d / d VAR ( term ) .)
    *               reduce using rule 9 (term -> d / d VAR ( term ) .)
    /               reduce using rule 9 (term -> d / d VAR ( term ) .)
    ^               reduce using rule 9 (term -> d / d VAR ( term ) .)
    VAR             reduce using rule 9 (term -> d / d VAR ( term ) .)
    $end            reduce using rule 9 (term -> d / d VAR ( term ) .)
    )               reduce using rule 9 (term -> d / d VAR ( term ) .)
    R_ARROW         reduce using rule 9 (term -> d / d VAR ( term ) .)
    d               reduce using rule 9 (term -> d / d VAR ( term ) .)
    ]               reduce using rule 9 (term -> d / d VAR ( term ) .)


state 82

    (26) term -> LIMIT_SYM [ term R_ARROW term ] ( . term )
    (7) term -> . FUNC_VAR ( NUMBER )
    (8) term -> . FUNC_VAR ( nums_with_cln )
    (9) term -> . d / d VAR ( term )
    (10) term -> . d FUNC_VAR / d VAR
    (11) term -> . S ( term d VAR )
    (12) term -> . S ( FUNC_VAR d VAR )
    (13) term -> . BUILD_IN_FUNC ( term )
    (14) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . e
    (24) term -> . VAR
    (25) term -> . term VAR
    (26) term -> . LIMIT_SYM [ term R_ARROW term ] ( term )

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 8
    S               shift and go to state 13
    BUILD_IN_FUNC   shift and go to state 2
    CONSTANTS       shift and go to state 7
    -               shift and go to state 1
    (               shift and go to state 10
    NUMBER          shift and go to state 6
    e               shift and go to state 4
    VAR             shift and go to state 17
    LIMIT_SYM       shift and go to state 11

    term                           shift and go to state 83

state 83

    (26) term -> LIMIT_SYM [ term R_ARROW term ] ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (25) term -> term . VAR

    )               shift and go to state 84
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 19
    /               shift and go to state 22
    ^               shift and go to state 20
    VAR             shift and go to state 21


state 84

    (26) term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .

    +               reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    -               reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    *               reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    /               reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    ^               reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    VAR             reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    $end            reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    )               reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    R_ARROW         reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    d               reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)
    ]               reduce using rule 26 (term -> LIMIT_SYM [ term R_ARROW term ] ( term ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 35 resolved as shift
WARNING: shift/reduce conflict for - in state 35 resolved as shift
WARNING: shift/reduce conflict for * in state 35 resolved as shift
WARNING: shift/reduce conflict for / in state 35 resolved as shift
WARNING: shift/reduce conflict for ^ in state 35 resolved as shift
WARNING: shift/reduce conflict for VAR in state 35 resolved as shift
