Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR = expression
Rule 2     statement -> FUNC_VAR ( VAR ) = expression
Rule 3     statement -> FUNC_VAR ( VARS_WITH_CLN ) = expression
Rule 4     expression -> FUNC_VAR ( NUMBER )
Rule 5     expression -> FUNC_VAR ( NUMS_WITH_CLN )
Rule 6     expression -> DIFF_SYM ( expression )
Rule 7     expression -> INTE_SYM ( expression INTE_D_DYM )
Rule 8     expression -> BUILD_IN_FUNC ( VAR )
Rule 9     expression -> CONSTANTS
Rule 10    statement -> expression
Rule 11    expression -> expression + expression
Rule 12    expression -> expression - expression
Rule 13    expression -> expression * expression
Rule 14    expression -> expression / expression
Rule 15    expression -> expression ^ expression
Rule 16    expression -> - expression
Rule 17    expression -> ( expression )
Rule 18    expression -> NUMBER
Rule 19    expression -> VAR
Rule 20    expression -> VAR_MULTI

Terminals, with rules where they appear

(                    : 2 3 4 5 6 7 8 17
)                    : 2 3 4 5 6 7 8 17
*                    : 13
+                    : 11
-                    : 12 16
/                    : 14
=                    : 1 2 3
BUILD_IN_FUNC        : 8
CONSTANTS            : 9
DIFF_SYM             : 6
FUNC_VAR             : 2 3 4 5
INTE_D_DYM           : 7
INTE_SYM             : 7
NUMBER               : 4 18
NUMS_WITH_CLN        : 5
VAR                  : 1 2 8 19
VARS_WITH_CLN        : 3
VAR_MULTI            : 20
^                    : 15
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 6 7 10 11 11 12 12 13 13 14 14 15 15 16 17
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR = expression
    (2) statement -> . FUNC_VAR ( VAR ) = expression
    (3) statement -> . FUNC_VAR ( VARS_WITH_CLN ) = expression
    (10) statement -> . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    VAR             shift and go to state 11
    FUNC_VAR        shift and go to state 2
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR_MULTI       shift and go to state 7

    statement                      shift and go to state 6
    expression                     shift and go to state 3

state 1

    (17) expression -> ( . expression )
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 14

state 2

    (2) statement -> FUNC_VAR . ( VAR ) = expression
    (3) statement -> FUNC_VAR . ( VARS_WITH_CLN ) = expression
    (4) expression -> FUNC_VAR . ( NUMBER )
    (5) expression -> FUNC_VAR . ( NUMS_WITH_CLN )

    (               shift and go to state 16


state 3

    (10) statement -> expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    $end            reduce using rule 10 (statement -> expression .)
    +               shift and go to state 19
    -               shift and go to state 17
    *               shift and go to state 21
    /               shift and go to state 20
    ^               shift and go to state 18


state 4

    (18) expression -> NUMBER .

    +               reduce using rule 18 (expression -> NUMBER .)
    -               reduce using rule 18 (expression -> NUMBER .)
    *               reduce using rule 18 (expression -> NUMBER .)
    /               reduce using rule 18 (expression -> NUMBER .)
    ^               reduce using rule 18 (expression -> NUMBER .)
    $end            reduce using rule 18 (expression -> NUMBER .)
    )               reduce using rule 18 (expression -> NUMBER .)
    INTE_D_DYM      reduce using rule 18 (expression -> NUMBER .)


state 5

    (16) expression -> - . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 22

state 6

    (0) S' -> statement .



state 7

    (20) expression -> VAR_MULTI .

    +               reduce using rule 20 (expression -> VAR_MULTI .)
    -               reduce using rule 20 (expression -> VAR_MULTI .)
    *               reduce using rule 20 (expression -> VAR_MULTI .)
    /               reduce using rule 20 (expression -> VAR_MULTI .)
    ^               reduce using rule 20 (expression -> VAR_MULTI .)
    $end            reduce using rule 20 (expression -> VAR_MULTI .)
    )               reduce using rule 20 (expression -> VAR_MULTI .)
    INTE_D_DYM      reduce using rule 20 (expression -> VAR_MULTI .)


state 8

    (9) expression -> CONSTANTS .

    +               reduce using rule 9 (expression -> CONSTANTS .)
    -               reduce using rule 9 (expression -> CONSTANTS .)
    *               reduce using rule 9 (expression -> CONSTANTS .)
    /               reduce using rule 9 (expression -> CONSTANTS .)
    ^               reduce using rule 9 (expression -> CONSTANTS .)
    $end            reduce using rule 9 (expression -> CONSTANTS .)
    )               reduce using rule 9 (expression -> CONSTANTS .)
    INTE_D_DYM      reduce using rule 9 (expression -> CONSTANTS .)


state 9

    (6) expression -> DIFF_SYM . ( expression )

    (               shift and go to state 23


state 10

    (7) expression -> INTE_SYM . ( expression INTE_D_DYM )

    (               shift and go to state 24


state 11

    (1) statement -> VAR . = expression
    (19) expression -> VAR .

    =               shift and go to state 25
    +               reduce using rule 19 (expression -> VAR .)
    -               reduce using rule 19 (expression -> VAR .)
    *               reduce using rule 19 (expression -> VAR .)
    /               reduce using rule 19 (expression -> VAR .)
    ^               reduce using rule 19 (expression -> VAR .)
    $end            reduce using rule 19 (expression -> VAR .)


state 12

    (8) expression -> BUILD_IN_FUNC . ( VAR )

    (               shift and go to state 26


state 13

    (4) expression -> FUNC_VAR . ( NUMBER )
    (5) expression -> FUNC_VAR . ( NUMS_WITH_CLN )

    (               shift and go to state 27


state 14

    (17) expression -> ( expression . )
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    )               shift and go to state 28
    +               shift and go to state 19
    -               shift and go to state 17
    *               shift and go to state 21
    /               shift and go to state 20
    ^               shift and go to state 18


state 15

    (19) expression -> VAR .

    +               reduce using rule 19 (expression -> VAR .)
    -               reduce using rule 19 (expression -> VAR .)
    *               reduce using rule 19 (expression -> VAR .)
    /               reduce using rule 19 (expression -> VAR .)
    ^               reduce using rule 19 (expression -> VAR .)
    $end            reduce using rule 19 (expression -> VAR .)
    )               reduce using rule 19 (expression -> VAR .)
    INTE_D_DYM      reduce using rule 19 (expression -> VAR .)


state 16

    (2) statement -> FUNC_VAR ( . VAR ) = expression
    (3) statement -> FUNC_VAR ( . VARS_WITH_CLN ) = expression
    (4) expression -> FUNC_VAR ( . NUMBER )
    (5) expression -> FUNC_VAR ( . NUMS_WITH_CLN )

    VAR             shift and go to state 32
    VARS_WITH_CLN   shift and go to state 31
    NUMBER          shift and go to state 30
    NUMS_WITH_CLN   shift and go to state 29


state 17

    (12) expression -> expression - . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 33

state 18

    (15) expression -> expression ^ . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 34

state 19

    (11) expression -> expression + . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 35

state 20

    (14) expression -> expression / . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 36

state 21

    (13) expression -> expression * . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 37

state 22

    (16) expression -> - expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    +               reduce using rule 16 (expression -> - expression .)
    -               reduce using rule 16 (expression -> - expression .)
    *               reduce using rule 16 (expression -> - expression .)
    /               reduce using rule 16 (expression -> - expression .)
    ^               reduce using rule 16 (expression -> - expression .)
    $end            reduce using rule 16 (expression -> - expression .)
    )               reduce using rule 16 (expression -> - expression .)
    INTE_D_DYM      reduce using rule 16 (expression -> - expression .)

  ! +               [ shift and go to state 19 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 21 ]
  ! /               [ shift and go to state 20 ]
  ! ^               [ shift and go to state 18 ]


state 23

    (6) expression -> DIFF_SYM ( . expression )
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 38

state 24

    (7) expression -> INTE_SYM ( . expression INTE_D_DYM )
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 39

state 25

    (1) statement -> VAR = . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 40

state 26

    (8) expression -> BUILD_IN_FUNC ( . VAR )

    VAR             shift and go to state 41


state 27

    (4) expression -> FUNC_VAR ( . NUMBER )
    (5) expression -> FUNC_VAR ( . NUMS_WITH_CLN )

    NUMBER          shift and go to state 30
    NUMS_WITH_CLN   shift and go to state 29


state 28

    (17) expression -> ( expression ) .

    +               reduce using rule 17 (expression -> ( expression ) .)
    -               reduce using rule 17 (expression -> ( expression ) .)
    *               reduce using rule 17 (expression -> ( expression ) .)
    /               reduce using rule 17 (expression -> ( expression ) .)
    ^               reduce using rule 17 (expression -> ( expression ) .)
    $end            reduce using rule 17 (expression -> ( expression ) .)
    )               reduce using rule 17 (expression -> ( expression ) .)
    INTE_D_DYM      reduce using rule 17 (expression -> ( expression ) .)


state 29

    (5) expression -> FUNC_VAR ( NUMS_WITH_CLN . )

    )               shift and go to state 42


state 30

    (4) expression -> FUNC_VAR ( NUMBER . )

    )               shift and go to state 43


state 31

    (3) statement -> FUNC_VAR ( VARS_WITH_CLN . ) = expression

    )               shift and go to state 44


state 32

    (2) statement -> FUNC_VAR ( VAR . ) = expression

    )               shift and go to state 45


state 33

    (12) expression -> expression - expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    +               reduce using rule 12 (expression -> expression - expression .)
    -               reduce using rule 12 (expression -> expression - expression .)
    ^               reduce using rule 12 (expression -> expression - expression .)
    $end            reduce using rule 12 (expression -> expression - expression .)
    )               reduce using rule 12 (expression -> expression - expression .)
    INTE_D_DYM      reduce using rule 12 (expression -> expression - expression .)
    *               shift and go to state 21
    /               shift and go to state 20

  ! *               [ reduce using rule 12 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 19 ]
  ! -               [ shift and go to state 17 ]
  ! ^               [ shift and go to state 18 ]


state 34

    (15) expression -> expression ^ expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    $end            reduce using rule 15 (expression -> expression ^ expression .)
    )               reduce using rule 15 (expression -> expression ^ expression .)
    INTE_D_DYM      reduce using rule 15 (expression -> expression ^ expression .)
    +               shift and go to state 19
    -               shift and go to state 17
    *               shift and go to state 21
    /               shift and go to state 20
    ^               shift and go to state 18

  ! +               [ reduce using rule 15 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression ^ expression .) ]
  ! ^               [ reduce using rule 15 (expression -> expression ^ expression .) ]


state 35

    (11) expression -> expression + expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    +               reduce using rule 11 (expression -> expression + expression .)
    -               reduce using rule 11 (expression -> expression + expression .)
    ^               reduce using rule 11 (expression -> expression + expression .)
    $end            reduce using rule 11 (expression -> expression + expression .)
    )               reduce using rule 11 (expression -> expression + expression .)
    INTE_D_DYM      reduce using rule 11 (expression -> expression + expression .)
    *               shift and go to state 21
    /               shift and go to state 20

  ! *               [ reduce using rule 11 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 19 ]
  ! -               [ shift and go to state 17 ]
  ! ^               [ shift and go to state 18 ]


state 36

    (14) expression -> expression / expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    +               reduce using rule 14 (expression -> expression / expression .)
    -               reduce using rule 14 (expression -> expression / expression .)
    *               reduce using rule 14 (expression -> expression / expression .)
    /               reduce using rule 14 (expression -> expression / expression .)
    ^               reduce using rule 14 (expression -> expression / expression .)
    $end            reduce using rule 14 (expression -> expression / expression .)
    )               reduce using rule 14 (expression -> expression / expression .)
    INTE_D_DYM      reduce using rule 14 (expression -> expression / expression .)

  ! +               [ shift and go to state 19 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 21 ]
  ! /               [ shift and go to state 20 ]
  ! ^               [ shift and go to state 18 ]


state 37

    (13) expression -> expression * expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    +               reduce using rule 13 (expression -> expression * expression .)
    -               reduce using rule 13 (expression -> expression * expression .)
    *               reduce using rule 13 (expression -> expression * expression .)
    /               reduce using rule 13 (expression -> expression * expression .)
    ^               reduce using rule 13 (expression -> expression * expression .)
    $end            reduce using rule 13 (expression -> expression * expression .)
    )               reduce using rule 13 (expression -> expression * expression .)
    INTE_D_DYM      reduce using rule 13 (expression -> expression * expression .)

  ! +               [ shift and go to state 19 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 21 ]
  ! /               [ shift and go to state 20 ]
  ! ^               [ shift and go to state 18 ]


state 38

    (6) expression -> DIFF_SYM ( expression . )
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    )               shift and go to state 46
    +               shift and go to state 19
    -               shift and go to state 17
    *               shift and go to state 21
    /               shift and go to state 20
    ^               shift and go to state 18


state 39

    (7) expression -> INTE_SYM ( expression . INTE_D_DYM )
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    INTE_D_DYM      shift and go to state 47
    +               shift and go to state 19
    -               shift and go to state 17
    *               shift and go to state 21
    /               shift and go to state 20
    ^               shift and go to state 18


state 40

    (1) statement -> VAR = expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    $end            reduce using rule 1 (statement -> VAR = expression .)
    +               shift and go to state 19
    -               shift and go to state 17
    *               shift and go to state 21
    /               shift and go to state 20
    ^               shift and go to state 18


state 41

    (8) expression -> BUILD_IN_FUNC ( VAR . )

    )               shift and go to state 48


state 42

    (5) expression -> FUNC_VAR ( NUMS_WITH_CLN ) .

    +               reduce using rule 5 (expression -> FUNC_VAR ( NUMS_WITH_CLN ) .)
    -               reduce using rule 5 (expression -> FUNC_VAR ( NUMS_WITH_CLN ) .)
    *               reduce using rule 5 (expression -> FUNC_VAR ( NUMS_WITH_CLN ) .)
    /               reduce using rule 5 (expression -> FUNC_VAR ( NUMS_WITH_CLN ) .)
    ^               reduce using rule 5 (expression -> FUNC_VAR ( NUMS_WITH_CLN ) .)
    $end            reduce using rule 5 (expression -> FUNC_VAR ( NUMS_WITH_CLN ) .)
    )               reduce using rule 5 (expression -> FUNC_VAR ( NUMS_WITH_CLN ) .)
    INTE_D_DYM      reduce using rule 5 (expression -> FUNC_VAR ( NUMS_WITH_CLN ) .)


state 43

    (4) expression -> FUNC_VAR ( NUMBER ) .

    +               reduce using rule 4 (expression -> FUNC_VAR ( NUMBER ) .)
    -               reduce using rule 4 (expression -> FUNC_VAR ( NUMBER ) .)
    *               reduce using rule 4 (expression -> FUNC_VAR ( NUMBER ) .)
    /               reduce using rule 4 (expression -> FUNC_VAR ( NUMBER ) .)
    ^               reduce using rule 4 (expression -> FUNC_VAR ( NUMBER ) .)
    $end            reduce using rule 4 (expression -> FUNC_VAR ( NUMBER ) .)
    )               reduce using rule 4 (expression -> FUNC_VAR ( NUMBER ) .)
    INTE_D_DYM      reduce using rule 4 (expression -> FUNC_VAR ( NUMBER ) .)


state 44

    (3) statement -> FUNC_VAR ( VARS_WITH_CLN ) . = expression

    =               shift and go to state 49


state 45

    (2) statement -> FUNC_VAR ( VAR ) . = expression

    =               shift and go to state 50


state 46

    (6) expression -> DIFF_SYM ( expression ) .

    +               reduce using rule 6 (expression -> DIFF_SYM ( expression ) .)
    -               reduce using rule 6 (expression -> DIFF_SYM ( expression ) .)
    *               reduce using rule 6 (expression -> DIFF_SYM ( expression ) .)
    /               reduce using rule 6 (expression -> DIFF_SYM ( expression ) .)
    ^               reduce using rule 6 (expression -> DIFF_SYM ( expression ) .)
    $end            reduce using rule 6 (expression -> DIFF_SYM ( expression ) .)
    )               reduce using rule 6 (expression -> DIFF_SYM ( expression ) .)
    INTE_D_DYM      reduce using rule 6 (expression -> DIFF_SYM ( expression ) .)


state 47

    (7) expression -> INTE_SYM ( expression INTE_D_DYM . )

    )               shift and go to state 51


state 48

    (8) expression -> BUILD_IN_FUNC ( VAR ) .

    +               reduce using rule 8 (expression -> BUILD_IN_FUNC ( VAR ) .)
    -               reduce using rule 8 (expression -> BUILD_IN_FUNC ( VAR ) .)
    *               reduce using rule 8 (expression -> BUILD_IN_FUNC ( VAR ) .)
    /               reduce using rule 8 (expression -> BUILD_IN_FUNC ( VAR ) .)
    ^               reduce using rule 8 (expression -> BUILD_IN_FUNC ( VAR ) .)
    $end            reduce using rule 8 (expression -> BUILD_IN_FUNC ( VAR ) .)
    )               reduce using rule 8 (expression -> BUILD_IN_FUNC ( VAR ) .)
    INTE_D_DYM      reduce using rule 8 (expression -> BUILD_IN_FUNC ( VAR ) .)


state 49

    (3) statement -> FUNC_VAR ( VARS_WITH_CLN ) = . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 52

state 50

    (2) statement -> FUNC_VAR ( VAR ) = . expression
    (4) expression -> . FUNC_VAR ( NUMBER )
    (5) expression -> . FUNC_VAR ( NUMS_WITH_CLN )
    (6) expression -> . DIFF_SYM ( expression )
    (7) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (8) expression -> . BUILD_IN_FUNC ( VAR )
    (9) expression -> . CONSTANTS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . expression ^ expression
    (16) expression -> . - expression
    (17) expression -> . ( expression )
    (18) expression -> . NUMBER
    (19) expression -> . VAR
    (20) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 13
    DIFF_SYM        shift and go to state 9
    INTE_SYM        shift and go to state 10
    BUILD_IN_FUNC   shift and go to state 12
    CONSTANTS       shift and go to state 8
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 4
    VAR             shift and go to state 15
    VAR_MULTI       shift and go to state 7

    expression                     shift and go to state 53

state 51

    (7) expression -> INTE_SYM ( expression INTE_D_DYM ) .

    +               reduce using rule 7 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    -               reduce using rule 7 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    *               reduce using rule 7 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    /               reduce using rule 7 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    ^               reduce using rule 7 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    $end            reduce using rule 7 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    )               reduce using rule 7 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    INTE_D_DYM      reduce using rule 7 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)


state 52

    (3) statement -> FUNC_VAR ( VARS_WITH_CLN ) = expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    $end            reduce using rule 3 (statement -> FUNC_VAR ( VARS_WITH_CLN ) = expression .)
    +               shift and go to state 19
    -               shift and go to state 17
    *               shift and go to state 21
    /               shift and go to state 20
    ^               shift and go to state 18


state 53

    (2) statement -> FUNC_VAR ( VAR ) = expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (15) expression -> expression . ^ expression

    $end            reduce using rule 2 (statement -> FUNC_VAR ( VAR ) = expression .)
    +               shift and go to state 19
    -               shift and go to state 17
    *               shift and go to state 21
    /               shift and go to state 20
    ^               shift and go to state 18

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 34 resolved as shift
WARNING: shift/reduce conflict for - in state 34 resolved as shift
WARNING: shift/reduce conflict for * in state 34 resolved as shift
WARNING: shift/reduce conflict for / in state 34 resolved as shift
WARNING: shift/reduce conflict for ^ in state 34 resolved as shift
