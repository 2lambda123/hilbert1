Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR = term
Rule 2     vars_with_cln -> VAR , VAR
Rule 3     vars_with_cln -> vars_with_cln , VAR
Rule 4     nums_with_cln -> NUMBER , NUMBER
Rule 5     nums_with_cln -> nums_with_cln , NUMBER
Rule 6     statement -> FUNC_VAR ( VAR ) = term
Rule 7     statement -> FUNC_VAR ( vars_with_cln ) = term
Rule 8     term -> FUNC_VAR ( NUMBER )
Rule 9     term -> FUNC_VAR ( nums_with_cln )
Rule 10    term -> d / d VAR ( term )
Rule 11    term -> S ( term d VAR )
Rule 12    term -> BUILD_IN_FUNC ( term )
Rule 13    term -> CONSTANTS
Rule 14    statement -> expression
Rule 15    term -> term + term
Rule 16    term -> term - term
Rule 17    term -> term * term
Rule 18    term -> term / term
Rule 19    term -> term ^ term
Rule 20    term -> - term
Rule 21    term -> ( term )
Rule 22    term -> NUMBER
Rule 23    term -> VAR
Rule 24    term -> term VAR
Rule 25    expression -> term
Rule 26    expression -> FUNC_VAR

Terminals, with rules where they appear

(                    : 6 7 8 9 10 11 12 21
)                    : 6 7 8 9 10 11 12 21
*                    : 17
+                    : 15
,                    : 2 3 4 5
-                    : 16 20
/                    : 10 18
=                    : 1 6 7
BUILD_IN_FUNC        : 12
CONSTANTS            : 13
FUNC_VAR             : 6 7 8 9 26
NUMBER               : 4 4 5 8 22
S                    : 11
VAR                  : 1 2 2 3 6 10 11 23 24
^                    : 19
d                    : 10 10 11
error                : 

Nonterminals, with rules where they appear

expression           : 14
nums_with_cln        : 5 9
statement            : 0
term                 : 1 6 7 10 11 12 15 15 16 16 17 17 18 18 19 19 20 21 24 25
vars_with_cln        : 3 7

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR = term
    (6) statement -> . FUNC_VAR ( VAR ) = term
    (7) statement -> . FUNC_VAR ( vars_with_cln ) = term
    (14) statement -> . expression
    (25) expression -> . term
    (26) expression -> . FUNC_VAR
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    VAR             shift and go to state 1
    FUNC_VAR        shift and go to state 7
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8

    statement                      shift and go to state 2
    expression                     shift and go to state 12
    term                           shift and go to state 4

state 1

    (1) statement -> VAR . = term
    (23) term -> VAR .

    =               shift and go to state 13
    +               reduce using rule 23 (term -> VAR .)
    -               reduce using rule 23 (term -> VAR .)
    *               reduce using rule 23 (term -> VAR .)
    /               reduce using rule 23 (term -> VAR .)
    ^               reduce using rule 23 (term -> VAR .)
    VAR             reduce using rule 23 (term -> VAR .)
    $end            reduce using rule 23 (term -> VAR .)


state 2

    (0) S' -> statement .



state 3

    (21) term -> ( . term )
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 15

state 4

    (25) expression -> term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    $end            reduce using rule 25 (expression -> term .)
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17


state 5

    (20) term -> - . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 23

state 6

    (13) term -> CONSTANTS .

    +               reduce using rule 13 (term -> CONSTANTS .)
    -               reduce using rule 13 (term -> CONSTANTS .)
    *               reduce using rule 13 (term -> CONSTANTS .)
    /               reduce using rule 13 (term -> CONSTANTS .)
    ^               reduce using rule 13 (term -> CONSTANTS .)
    VAR             reduce using rule 13 (term -> CONSTANTS .)
    $end            reduce using rule 13 (term -> CONSTANTS .)
    )               reduce using rule 13 (term -> CONSTANTS .)
    d               reduce using rule 13 (term -> CONSTANTS .)


state 7

    (6) statement -> FUNC_VAR . ( VAR ) = term
    (7) statement -> FUNC_VAR . ( vars_with_cln ) = term
    (26) expression -> FUNC_VAR .
    (8) term -> FUNC_VAR . ( NUMBER )
    (9) term -> FUNC_VAR . ( nums_with_cln )

    (               shift and go to state 24
    $end            reduce using rule 26 (expression -> FUNC_VAR .)


state 8

    (22) term -> NUMBER .

    +               reduce using rule 22 (term -> NUMBER .)
    -               reduce using rule 22 (term -> NUMBER .)
    *               reduce using rule 22 (term -> NUMBER .)
    /               reduce using rule 22 (term -> NUMBER .)
    ^               reduce using rule 22 (term -> NUMBER .)
    VAR             reduce using rule 22 (term -> NUMBER .)
    $end            reduce using rule 22 (term -> NUMBER .)
    )               reduce using rule 22 (term -> NUMBER .)
    d               reduce using rule 22 (term -> NUMBER .)


state 9

    (11) term -> S . ( term d VAR )

    (               shift and go to state 25


state 10

    (12) term -> BUILD_IN_FUNC . ( term )

    (               shift and go to state 26


state 11

    (10) term -> d . / d VAR ( term )

    /               shift and go to state 27


state 12

    (14) statement -> expression .

    $end            reduce using rule 14 (statement -> expression .)


state 13

    (1) statement -> VAR = . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 28

state 14

    (23) term -> VAR .

    +               reduce using rule 23 (term -> VAR .)
    -               reduce using rule 23 (term -> VAR .)
    *               reduce using rule 23 (term -> VAR .)
    /               reduce using rule 23 (term -> VAR .)
    ^               reduce using rule 23 (term -> VAR .)
    VAR             reduce using rule 23 (term -> VAR .)
    $end            reduce using rule 23 (term -> VAR .)
    )               reduce using rule 23 (term -> VAR .)
    d               reduce using rule 23 (term -> VAR .)


state 15

    (21) term -> ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    )               shift and go to state 29
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17


state 16

    (8) term -> FUNC_VAR . ( NUMBER )
    (9) term -> FUNC_VAR . ( nums_with_cln )

    (               shift and go to state 30


state 17

    (24) term -> term VAR .

    +               reduce using rule 24 (term -> term VAR .)
    -               reduce using rule 24 (term -> term VAR .)
    *               reduce using rule 24 (term -> term VAR .)
    /               reduce using rule 24 (term -> term VAR .)
    ^               reduce using rule 24 (term -> term VAR .)
    VAR             reduce using rule 24 (term -> term VAR .)
    $end            reduce using rule 24 (term -> term VAR .)
    )               reduce using rule 24 (term -> term VAR .)
    d               reduce using rule 24 (term -> term VAR .)


state 18

    (17) term -> term * . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 31

state 19

    (16) term -> term - . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 32

state 20

    (15) term -> term + . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 33

state 21

    (18) term -> term / . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 34

state 22

    (19) term -> term ^ . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 35

state 23

    (20) term -> - term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    +               reduce using rule 20 (term -> - term .)
    -               reduce using rule 20 (term -> - term .)
    *               reduce using rule 20 (term -> - term .)
    /               reduce using rule 20 (term -> - term .)
    ^               reduce using rule 20 (term -> - term .)
    VAR             reduce using rule 20 (term -> - term .)
    $end            reduce using rule 20 (term -> - term .)
    )               reduce using rule 20 (term -> - term .)
    d               reduce using rule 20 (term -> - term .)

  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 21 ]
  ! ^               [ shift and go to state 22 ]
  ! VAR             [ shift and go to state 17 ]


state 24

    (6) statement -> FUNC_VAR ( . VAR ) = term
    (7) statement -> FUNC_VAR ( . vars_with_cln ) = term
    (8) term -> FUNC_VAR ( . NUMBER )
    (9) term -> FUNC_VAR ( . nums_with_cln )
    (2) vars_with_cln -> . VAR , VAR
    (3) vars_with_cln -> . vars_with_cln , VAR
    (4) nums_with_cln -> . NUMBER , NUMBER
    (5) nums_with_cln -> . nums_with_cln , NUMBER

    VAR             shift and go to state 37
    NUMBER          shift and go to state 38

    vars_with_cln                  shift and go to state 36
    nums_with_cln                  shift and go to state 39

state 25

    (11) term -> S ( . term d VAR )
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 40

state 26

    (12) term -> BUILD_IN_FUNC ( . term )
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 41

state 27

    (10) term -> d / . d VAR ( term )

    d               shift and go to state 42


state 28

    (1) statement -> VAR = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    $end            reduce using rule 1 (statement -> VAR = term .)
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17


state 29

    (21) term -> ( term ) .

    +               reduce using rule 21 (term -> ( term ) .)
    -               reduce using rule 21 (term -> ( term ) .)
    *               reduce using rule 21 (term -> ( term ) .)
    /               reduce using rule 21 (term -> ( term ) .)
    ^               reduce using rule 21 (term -> ( term ) .)
    VAR             reduce using rule 21 (term -> ( term ) .)
    $end            reduce using rule 21 (term -> ( term ) .)
    )               reduce using rule 21 (term -> ( term ) .)
    d               reduce using rule 21 (term -> ( term ) .)


state 30

    (8) term -> FUNC_VAR ( . NUMBER )
    (9) term -> FUNC_VAR ( . nums_with_cln )
    (4) nums_with_cln -> . NUMBER , NUMBER
    (5) nums_with_cln -> . nums_with_cln , NUMBER

    NUMBER          shift and go to state 38

    nums_with_cln                  shift and go to state 39

state 31

    (17) term -> term * term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    +               reduce using rule 17 (term -> term * term .)
    -               reduce using rule 17 (term -> term * term .)
    *               reduce using rule 17 (term -> term * term .)
    /               reduce using rule 17 (term -> term * term .)
    ^               reduce using rule 17 (term -> term * term .)
    VAR             reduce using rule 17 (term -> term * term .)
    $end            reduce using rule 17 (term -> term * term .)
    )               reduce using rule 17 (term -> term * term .)
    d               reduce using rule 17 (term -> term * term .)

  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 21 ]
  ! ^               [ shift and go to state 22 ]
  ! VAR             [ shift and go to state 17 ]


state 32

    (16) term -> term - term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    +               reduce using rule 16 (term -> term - term .)
    -               reduce using rule 16 (term -> term - term .)
    ^               reduce using rule 16 (term -> term - term .)
    VAR             reduce using rule 16 (term -> term - term .)
    $end            reduce using rule 16 (term -> term - term .)
    )               reduce using rule 16 (term -> term - term .)
    d               reduce using rule 16 (term -> term - term .)
    *               shift and go to state 18
    /               shift and go to state 21

  ! *               [ reduce using rule 16 (term -> term - term .) ]
  ! /               [ reduce using rule 16 (term -> term - term .) ]
  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 19 ]
  ! ^               [ shift and go to state 22 ]
  ! VAR             [ shift and go to state 17 ]


state 33

    (15) term -> term + term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    +               reduce using rule 15 (term -> term + term .)
    -               reduce using rule 15 (term -> term + term .)
    ^               reduce using rule 15 (term -> term + term .)
    VAR             reduce using rule 15 (term -> term + term .)
    $end            reduce using rule 15 (term -> term + term .)
    )               reduce using rule 15 (term -> term + term .)
    d               reduce using rule 15 (term -> term + term .)
    *               shift and go to state 18
    /               shift and go to state 21

  ! *               [ reduce using rule 15 (term -> term + term .) ]
  ! /               [ reduce using rule 15 (term -> term + term .) ]
  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 19 ]
  ! ^               [ shift and go to state 22 ]
  ! VAR             [ shift and go to state 17 ]


state 34

    (18) term -> term / term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    +               reduce using rule 18 (term -> term / term .)
    -               reduce using rule 18 (term -> term / term .)
    *               reduce using rule 18 (term -> term / term .)
    /               reduce using rule 18 (term -> term / term .)
    ^               reduce using rule 18 (term -> term / term .)
    VAR             reduce using rule 18 (term -> term / term .)
    $end            reduce using rule 18 (term -> term / term .)
    )               reduce using rule 18 (term -> term / term .)
    d               reduce using rule 18 (term -> term / term .)

  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 21 ]
  ! ^               [ shift and go to state 22 ]
  ! VAR             [ shift and go to state 17 ]


state 35

    (19) term -> term ^ term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    $end            reduce using rule 19 (term -> term ^ term .)
    )               reduce using rule 19 (term -> term ^ term .)
    d               reduce using rule 19 (term -> term ^ term .)
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17

  ! +               [ reduce using rule 19 (term -> term ^ term .) ]
  ! -               [ reduce using rule 19 (term -> term ^ term .) ]
  ! *               [ reduce using rule 19 (term -> term ^ term .) ]
  ! /               [ reduce using rule 19 (term -> term ^ term .) ]
  ! ^               [ reduce using rule 19 (term -> term ^ term .) ]
  ! VAR             [ reduce using rule 19 (term -> term ^ term .) ]


state 36

    (7) statement -> FUNC_VAR ( vars_with_cln . ) = term
    (3) vars_with_cln -> vars_with_cln . , VAR

    )               shift and go to state 43
    ,               shift and go to state 44


state 37

    (6) statement -> FUNC_VAR ( VAR . ) = term
    (2) vars_with_cln -> VAR . , VAR

    )               shift and go to state 45
    ,               shift and go to state 46


state 38

    (8) term -> FUNC_VAR ( NUMBER . )
    (4) nums_with_cln -> NUMBER . , NUMBER

    )               shift and go to state 47
    ,               shift and go to state 48


state 39

    (9) term -> FUNC_VAR ( nums_with_cln . )
    (5) nums_with_cln -> nums_with_cln . , NUMBER

    )               shift and go to state 49
    ,               shift and go to state 50


state 40

    (11) term -> S ( term . d VAR )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    d               shift and go to state 51
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17


state 41

    (12) term -> BUILD_IN_FUNC ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    )               shift and go to state 52
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17


state 42

    (10) term -> d / d . VAR ( term )

    VAR             shift and go to state 53


state 43

    (7) statement -> FUNC_VAR ( vars_with_cln ) . = term

    =               shift and go to state 54


state 44

    (3) vars_with_cln -> vars_with_cln , . VAR

    VAR             shift and go to state 55


state 45

    (6) statement -> FUNC_VAR ( VAR ) . = term

    =               shift and go to state 56


state 46

    (2) vars_with_cln -> VAR , . VAR

    VAR             shift and go to state 57


state 47

    (8) term -> FUNC_VAR ( NUMBER ) .

    +               reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)
    -               reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)
    *               reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)
    /               reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)
    ^               reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)
    VAR             reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)
    $end            reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)
    )               reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)
    d               reduce using rule 8 (term -> FUNC_VAR ( NUMBER ) .)


state 48

    (4) nums_with_cln -> NUMBER , . NUMBER

    NUMBER          shift and go to state 58


state 49

    (9) term -> FUNC_VAR ( nums_with_cln ) .

    +               reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)
    -               reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)
    *               reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)
    /               reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)
    ^               reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)
    VAR             reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)
    $end            reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)
    )               reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)
    d               reduce using rule 9 (term -> FUNC_VAR ( nums_with_cln ) .)


state 50

    (5) nums_with_cln -> nums_with_cln , . NUMBER

    NUMBER          shift and go to state 59


state 51

    (11) term -> S ( term d . VAR )

    VAR             shift and go to state 60


state 52

    (12) term -> BUILD_IN_FUNC ( term ) .

    +               reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)
    -               reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)
    *               reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)
    /               reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)
    ^               reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)
    VAR             reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)
    $end            reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)
    )               reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)
    d               reduce using rule 12 (term -> BUILD_IN_FUNC ( term ) .)


state 53

    (10) term -> d / d VAR . ( term )

    (               shift and go to state 61


state 54

    (7) statement -> FUNC_VAR ( vars_with_cln ) = . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 62

state 55

    (3) vars_with_cln -> vars_with_cln , VAR .

    )               reduce using rule 3 (vars_with_cln -> vars_with_cln , VAR .)
    ,               reduce using rule 3 (vars_with_cln -> vars_with_cln , VAR .)


state 56

    (6) statement -> FUNC_VAR ( VAR ) = . term
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 63

state 57

    (2) vars_with_cln -> VAR , VAR .

    )               reduce using rule 2 (vars_with_cln -> VAR , VAR .)
    ,               reduce using rule 2 (vars_with_cln -> VAR , VAR .)


state 58

    (4) nums_with_cln -> NUMBER , NUMBER .

    )               reduce using rule 4 (nums_with_cln -> NUMBER , NUMBER .)
    ,               reduce using rule 4 (nums_with_cln -> NUMBER , NUMBER .)


state 59

    (5) nums_with_cln -> nums_with_cln , NUMBER .

    )               reduce using rule 5 (nums_with_cln -> nums_with_cln , NUMBER .)
    ,               reduce using rule 5 (nums_with_cln -> nums_with_cln , NUMBER .)


state 60

    (11) term -> S ( term d VAR . )

    )               shift and go to state 64


state 61

    (10) term -> d / d VAR ( . term )
    (8) term -> . FUNC_VAR ( NUMBER )
    (9) term -> . FUNC_VAR ( nums_with_cln )
    (10) term -> . d / d VAR ( term )
    (11) term -> . S ( term d VAR )
    (12) term -> . BUILD_IN_FUNC ( term )
    (13) term -> . CONSTANTS
    (15) term -> . term + term
    (16) term -> . term - term
    (17) term -> . term * term
    (18) term -> . term / term
    (19) term -> . term ^ term
    (20) term -> . - term
    (21) term -> . ( term )
    (22) term -> . NUMBER
    (23) term -> . VAR
    (24) term -> . term VAR

    FUNC_VAR        shift and go to state 16
    d               shift and go to state 11
    S               shift and go to state 9
    BUILD_IN_FUNC   shift and go to state 10
    CONSTANTS       shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 3
    NUMBER          shift and go to state 8
    VAR             shift and go to state 14

    term                           shift and go to state 65

state 62

    (7) statement -> FUNC_VAR ( vars_with_cln ) = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    $end            reduce using rule 7 (statement -> FUNC_VAR ( vars_with_cln ) = term .)
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17


state 63

    (6) statement -> FUNC_VAR ( VAR ) = term .
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    $end            reduce using rule 6 (statement -> FUNC_VAR ( VAR ) = term .)
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17


state 64

    (11) term -> S ( term d VAR ) .

    +               reduce using rule 11 (term -> S ( term d VAR ) .)
    -               reduce using rule 11 (term -> S ( term d VAR ) .)
    *               reduce using rule 11 (term -> S ( term d VAR ) .)
    /               reduce using rule 11 (term -> S ( term d VAR ) .)
    ^               reduce using rule 11 (term -> S ( term d VAR ) .)
    VAR             reduce using rule 11 (term -> S ( term d VAR ) .)
    $end            reduce using rule 11 (term -> S ( term d VAR ) .)
    )               reduce using rule 11 (term -> S ( term d VAR ) .)
    d               reduce using rule 11 (term -> S ( term d VAR ) .)


state 65

    (10) term -> d / d VAR ( term . )
    (15) term -> term . + term
    (16) term -> term . - term
    (17) term -> term . * term
    (18) term -> term . / term
    (19) term -> term . ^ term
    (24) term -> term . VAR

    )               shift and go to state 66
    +               shift and go to state 20
    -               shift and go to state 19
    *               shift and go to state 18
    /               shift and go to state 21
    ^               shift and go to state 22
    VAR             shift and go to state 17


state 66

    (10) term -> d / d VAR ( term ) .

    +               reduce using rule 10 (term -> d / d VAR ( term ) .)
    -               reduce using rule 10 (term -> d / d VAR ( term ) .)
    *               reduce using rule 10 (term -> d / d VAR ( term ) .)
    /               reduce using rule 10 (term -> d / d VAR ( term ) .)
    ^               reduce using rule 10 (term -> d / d VAR ( term ) .)
    VAR             reduce using rule 10 (term -> d / d VAR ( term ) .)
    $end            reduce using rule 10 (term -> d / d VAR ( term ) .)
    )               reduce using rule 10 (term -> d / d VAR ( term ) .)
    d               reduce using rule 10 (term -> d / d VAR ( term ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 35 resolved as shift
WARNING: shift/reduce conflict for - in state 35 resolved as shift
WARNING: shift/reduce conflict for * in state 35 resolved as shift
WARNING: shift/reduce conflict for / in state 35 resolved as shift
WARNING: shift/reduce conflict for ^ in state 35 resolved as shift
WARNING: shift/reduce conflict for VAR in state 35 resolved as shift
