Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR = expression
Rule 2     vars_with_cln -> VAR , VAR
Rule 3     nums_with_cln -> NUMBER , NUMBER
Rule 4     statement -> FUNC_VAR ( VAR ) = expression
Rule 5     statement -> FUNC_VAR ( vars_with_cln ) = expression
Rule 6     expression -> FUNC_VAR ( NUMBER )
Rule 7     expression -> FUNC_VAR ( nums_with_cln )
Rule 8     expression -> DIFF_SYM ( expression )
Rule 9     expression -> INTE_SYM ( expression INTE_D_DYM )
Rule 10    expression -> BUILD_IN_FUNC ( VAR )
Rule 11    expression -> CONSTANTS
Rule 12    statement -> expression
Rule 13    expression -> expression + expression
Rule 14    expression -> expression - expression
Rule 15    expression -> expression * expression
Rule 16    expression -> expression / expression
Rule 17    expression -> expression ^ expression
Rule 18    expression -> - expression
Rule 19    expression -> ( expression )
Rule 20    expression -> NUMBER
Rule 21    expression -> VAR
Rule 22    expression -> expression VAR

Terminals, with rules where they appear

(                    : 4 5 6 7 8 9 10 19
)                    : 4 5 6 7 8 9 10 19
*                    : 15
+                    : 13
,                    : 2 3
-                    : 14 18
/                    : 16
=                    : 1 4 5
BUILD_IN_FUNC        : 10
CONSTANTS            : 11
DIFF_SYM             : 8
FUNC_VAR             : 4 5 6 7
INTE_D_DYM           : 9
INTE_SYM             : 9
NUMBER               : 3 3 6 20
VAR                  : 1 2 2 4 10 21 22
^                    : 17
error                : 

Nonterminals, with rules where they appear

expression           : 1 4 5 8 9 12 13 13 14 14 15 15 16 16 17 17 18 19 22
nums_with_cln        : 7
statement            : 0
vars_with_cln        : 5

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR = expression
    (4) statement -> . FUNC_VAR ( VAR ) = expression
    (5) statement -> . FUNC_VAR ( vars_with_cln ) = expression
    (12) statement -> . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    VAR             shift and go to state 2
    FUNC_VAR        shift and go to state 4
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10

    expression                     shift and go to state 1
    statement                      shift and go to state 11

state 1

    (12) statement -> expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    $end            reduce using rule 12 (statement -> expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 16
    ^               shift and go to state 17
    VAR             shift and go to state 12


state 2

    (1) statement -> VAR . = expression
    (21) expression -> VAR .

    =               shift and go to state 18
    +               reduce using rule 21 (expression -> VAR .)
    -               reduce using rule 21 (expression -> VAR .)
    *               reduce using rule 21 (expression -> VAR .)
    /               reduce using rule 21 (expression -> VAR .)
    ^               reduce using rule 21 (expression -> VAR .)
    VAR             reduce using rule 21 (expression -> VAR .)
    $end            reduce using rule 21 (expression -> VAR .)


state 3

    (19) expression -> ( . expression )
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 19

state 4

    (4) statement -> FUNC_VAR . ( VAR ) = expression
    (5) statement -> FUNC_VAR . ( vars_with_cln ) = expression
    (6) expression -> FUNC_VAR . ( NUMBER )
    (7) expression -> FUNC_VAR . ( nums_with_cln )

    (               shift and go to state 22


state 5

    (10) expression -> BUILD_IN_FUNC . ( VAR )

    (               shift and go to state 23


state 6

    (9) expression -> INTE_SYM . ( expression INTE_D_DYM )

    (               shift and go to state 24


state 7

    (8) expression -> DIFF_SYM . ( expression )

    (               shift and go to state 25


state 8

    (11) expression -> CONSTANTS .

    +               reduce using rule 11 (expression -> CONSTANTS .)
    -               reduce using rule 11 (expression -> CONSTANTS .)
    *               reduce using rule 11 (expression -> CONSTANTS .)
    /               reduce using rule 11 (expression -> CONSTANTS .)
    ^               reduce using rule 11 (expression -> CONSTANTS .)
    VAR             reduce using rule 11 (expression -> CONSTANTS .)
    $end            reduce using rule 11 (expression -> CONSTANTS .)
    )               reduce using rule 11 (expression -> CONSTANTS .)
    INTE_D_DYM      reduce using rule 11 (expression -> CONSTANTS .)


state 9

    (18) expression -> - . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 26

state 10

    (20) expression -> NUMBER .

    +               reduce using rule 20 (expression -> NUMBER .)
    -               reduce using rule 20 (expression -> NUMBER .)
    *               reduce using rule 20 (expression -> NUMBER .)
    /               reduce using rule 20 (expression -> NUMBER .)
    ^               reduce using rule 20 (expression -> NUMBER .)
    VAR             reduce using rule 20 (expression -> NUMBER .)
    $end            reduce using rule 20 (expression -> NUMBER .)
    )               reduce using rule 20 (expression -> NUMBER .)
    INTE_D_DYM      reduce using rule 20 (expression -> NUMBER .)


state 11

    (0) S' -> statement .



state 12

    (22) expression -> expression VAR .

    +               reduce using rule 22 (expression -> expression VAR .)
    -               reduce using rule 22 (expression -> expression VAR .)
    *               reduce using rule 22 (expression -> expression VAR .)
    /               reduce using rule 22 (expression -> expression VAR .)
    ^               reduce using rule 22 (expression -> expression VAR .)
    VAR             reduce using rule 22 (expression -> expression VAR .)
    $end            reduce using rule 22 (expression -> expression VAR .)
    )               reduce using rule 22 (expression -> expression VAR .)
    INTE_D_DYM      reduce using rule 22 (expression -> expression VAR .)


state 13

    (14) expression -> expression - . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 27

state 14

    (15) expression -> expression * . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 28

state 15

    (13) expression -> expression + . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 29

state 16

    (16) expression -> expression / . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 30

state 17

    (17) expression -> expression ^ . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 31

state 18

    (1) statement -> VAR = . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 32

state 19

    (19) expression -> ( expression . )
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    )               shift and go to state 33
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 16
    ^               shift and go to state 17
    VAR             shift and go to state 12


state 20

    (21) expression -> VAR .

    +               reduce using rule 21 (expression -> VAR .)
    -               reduce using rule 21 (expression -> VAR .)
    *               reduce using rule 21 (expression -> VAR .)
    /               reduce using rule 21 (expression -> VAR .)
    ^               reduce using rule 21 (expression -> VAR .)
    VAR             reduce using rule 21 (expression -> VAR .)
    $end            reduce using rule 21 (expression -> VAR .)
    )               reduce using rule 21 (expression -> VAR .)
    INTE_D_DYM      reduce using rule 21 (expression -> VAR .)


state 21

    (6) expression -> FUNC_VAR . ( NUMBER )
    (7) expression -> FUNC_VAR . ( nums_with_cln )

    (               shift and go to state 34


state 22

    (4) statement -> FUNC_VAR ( . VAR ) = expression
    (5) statement -> FUNC_VAR ( . vars_with_cln ) = expression
    (6) expression -> FUNC_VAR ( . NUMBER )
    (7) expression -> FUNC_VAR ( . nums_with_cln )
    (2) vars_with_cln -> . VAR , VAR
    (3) nums_with_cln -> . NUMBER , NUMBER

    VAR             shift and go to state 35
    NUMBER          shift and go to state 36

    nums_with_cln                  shift and go to state 38
    vars_with_cln                  shift and go to state 37

state 23

    (10) expression -> BUILD_IN_FUNC ( . VAR )

    VAR             shift and go to state 39


state 24

    (9) expression -> INTE_SYM ( . expression INTE_D_DYM )
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 40

state 25

    (8) expression -> DIFF_SYM ( . expression )
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 41

state 26

    (18) expression -> - expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    +               reduce using rule 18 (expression -> - expression .)
    -               reduce using rule 18 (expression -> - expression .)
    *               reduce using rule 18 (expression -> - expression .)
    /               reduce using rule 18 (expression -> - expression .)
    ^               reduce using rule 18 (expression -> - expression .)
    VAR             reduce using rule 18 (expression -> - expression .)
    $end            reduce using rule 18 (expression -> - expression .)
    )               reduce using rule 18 (expression -> - expression .)
    INTE_D_DYM      reduce using rule 18 (expression -> - expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! *               [ shift and go to state 14 ]
  ! /               [ shift and go to state 16 ]
  ! ^               [ shift and go to state 17 ]
  ! VAR             [ shift and go to state 12 ]


state 27

    (14) expression -> expression - expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    +               reduce using rule 14 (expression -> expression - expression .)
    -               reduce using rule 14 (expression -> expression - expression .)
    ^               reduce using rule 14 (expression -> expression - expression .)
    VAR             reduce using rule 14 (expression -> expression - expression .)
    $end            reduce using rule 14 (expression -> expression - expression .)
    )               reduce using rule 14 (expression -> expression - expression .)
    INTE_D_DYM      reduce using rule 14 (expression -> expression - expression .)
    *               shift and go to state 14
    /               shift and go to state 16

  ! *               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! ^               [ shift and go to state 17 ]
  ! VAR             [ shift and go to state 12 ]


state 28

    (15) expression -> expression * expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    +               reduce using rule 15 (expression -> expression * expression .)
    -               reduce using rule 15 (expression -> expression * expression .)
    *               reduce using rule 15 (expression -> expression * expression .)
    /               reduce using rule 15 (expression -> expression * expression .)
    ^               reduce using rule 15 (expression -> expression * expression .)
    VAR             reduce using rule 15 (expression -> expression * expression .)
    $end            reduce using rule 15 (expression -> expression * expression .)
    )               reduce using rule 15 (expression -> expression * expression .)
    INTE_D_DYM      reduce using rule 15 (expression -> expression * expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! *               [ shift and go to state 14 ]
  ! /               [ shift and go to state 16 ]
  ! ^               [ shift and go to state 17 ]
  ! VAR             [ shift and go to state 12 ]


state 29

    (13) expression -> expression + expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    +               reduce using rule 13 (expression -> expression + expression .)
    -               reduce using rule 13 (expression -> expression + expression .)
    ^               reduce using rule 13 (expression -> expression + expression .)
    VAR             reduce using rule 13 (expression -> expression + expression .)
    $end            reduce using rule 13 (expression -> expression + expression .)
    )               reduce using rule 13 (expression -> expression + expression .)
    INTE_D_DYM      reduce using rule 13 (expression -> expression + expression .)
    *               shift and go to state 14
    /               shift and go to state 16

  ! *               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! ^               [ shift and go to state 17 ]
  ! VAR             [ shift and go to state 12 ]


state 30

    (16) expression -> expression / expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    +               reduce using rule 16 (expression -> expression / expression .)
    -               reduce using rule 16 (expression -> expression / expression .)
    *               reduce using rule 16 (expression -> expression / expression .)
    /               reduce using rule 16 (expression -> expression / expression .)
    ^               reduce using rule 16 (expression -> expression / expression .)
    VAR             reduce using rule 16 (expression -> expression / expression .)
    $end            reduce using rule 16 (expression -> expression / expression .)
    )               reduce using rule 16 (expression -> expression / expression .)
    INTE_D_DYM      reduce using rule 16 (expression -> expression / expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! *               [ shift and go to state 14 ]
  ! /               [ shift and go to state 16 ]
  ! ^               [ shift and go to state 17 ]
  ! VAR             [ shift and go to state 12 ]


state 31

    (17) expression -> expression ^ expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    $end            reduce using rule 17 (expression -> expression ^ expression .)
    )               reduce using rule 17 (expression -> expression ^ expression .)
    INTE_D_DYM      reduce using rule 17 (expression -> expression ^ expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 16
    ^               shift and go to state 17
    VAR             shift and go to state 12

  ! +               [ reduce using rule 17 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 17 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 17 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression ^ expression .) ]
  ! ^               [ reduce using rule 17 (expression -> expression ^ expression .) ]
  ! VAR             [ reduce using rule 17 (expression -> expression ^ expression .) ]


state 32

    (1) statement -> VAR = expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    $end            reduce using rule 1 (statement -> VAR = expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 16
    ^               shift and go to state 17
    VAR             shift and go to state 12


state 33

    (19) expression -> ( expression ) .

    +               reduce using rule 19 (expression -> ( expression ) .)
    -               reduce using rule 19 (expression -> ( expression ) .)
    *               reduce using rule 19 (expression -> ( expression ) .)
    /               reduce using rule 19 (expression -> ( expression ) .)
    ^               reduce using rule 19 (expression -> ( expression ) .)
    VAR             reduce using rule 19 (expression -> ( expression ) .)
    $end            reduce using rule 19 (expression -> ( expression ) .)
    )               reduce using rule 19 (expression -> ( expression ) .)
    INTE_D_DYM      reduce using rule 19 (expression -> ( expression ) .)


state 34

    (6) expression -> FUNC_VAR ( . NUMBER )
    (7) expression -> FUNC_VAR ( . nums_with_cln )
    (3) nums_with_cln -> . NUMBER , NUMBER

    NUMBER          shift and go to state 36

    nums_with_cln                  shift and go to state 38

state 35

    (4) statement -> FUNC_VAR ( VAR . ) = expression
    (2) vars_with_cln -> VAR . , VAR

    )               shift and go to state 42
    ,               shift and go to state 43


state 36

    (6) expression -> FUNC_VAR ( NUMBER . )
    (3) nums_with_cln -> NUMBER . , NUMBER

    )               shift and go to state 45
    ,               shift and go to state 44


state 37

    (5) statement -> FUNC_VAR ( vars_with_cln . ) = expression

    )               shift and go to state 46


state 38

    (7) expression -> FUNC_VAR ( nums_with_cln . )

    )               shift and go to state 47


state 39

    (10) expression -> BUILD_IN_FUNC ( VAR . )

    )               shift and go to state 48


state 40

    (9) expression -> INTE_SYM ( expression . INTE_D_DYM )
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    INTE_D_DYM      shift and go to state 49
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 16
    ^               shift and go to state 17
    VAR             shift and go to state 12


state 41

    (8) expression -> DIFF_SYM ( expression . )
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    )               shift and go to state 50
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 16
    ^               shift and go to state 17
    VAR             shift and go to state 12


state 42

    (4) statement -> FUNC_VAR ( VAR ) . = expression

    =               shift and go to state 51


state 43

    (2) vars_with_cln -> VAR , . VAR

    VAR             shift and go to state 52


state 44

    (3) nums_with_cln -> NUMBER , . NUMBER

    NUMBER          shift and go to state 53


state 45

    (6) expression -> FUNC_VAR ( NUMBER ) .

    +               reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)
    -               reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)
    *               reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)
    /               reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)
    ^               reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)
    VAR             reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)
    $end            reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)
    )               reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)
    INTE_D_DYM      reduce using rule 6 (expression -> FUNC_VAR ( NUMBER ) .)


state 46

    (5) statement -> FUNC_VAR ( vars_with_cln ) . = expression

    =               shift and go to state 54


state 47

    (7) expression -> FUNC_VAR ( nums_with_cln ) .

    +               reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)
    -               reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)
    *               reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)
    /               reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)
    ^               reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)
    VAR             reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)
    $end            reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)
    )               reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)
    INTE_D_DYM      reduce using rule 7 (expression -> FUNC_VAR ( nums_with_cln ) .)


state 48

    (10) expression -> BUILD_IN_FUNC ( VAR ) .

    +               reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)
    -               reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)
    *               reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)
    /               reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)
    ^               reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)
    VAR             reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)
    $end            reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)
    )               reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)
    INTE_D_DYM      reduce using rule 10 (expression -> BUILD_IN_FUNC ( VAR ) .)


state 49

    (9) expression -> INTE_SYM ( expression INTE_D_DYM . )

    )               shift and go to state 55


state 50

    (8) expression -> DIFF_SYM ( expression ) .

    +               reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)
    -               reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)
    *               reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)
    /               reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)
    ^               reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)
    VAR             reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)
    $end            reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)
    )               reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)
    INTE_D_DYM      reduce using rule 8 (expression -> DIFF_SYM ( expression ) .)


state 51

    (4) statement -> FUNC_VAR ( VAR ) = . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 56

state 52

    (2) vars_with_cln -> VAR , VAR .

    )               reduce using rule 2 (vars_with_cln -> VAR , VAR .)


state 53

    (3) nums_with_cln -> NUMBER , NUMBER .

    )               reduce using rule 3 (nums_with_cln -> NUMBER , NUMBER .)


state 54

    (5) statement -> FUNC_VAR ( vars_with_cln ) = . expression
    (6) expression -> . FUNC_VAR ( NUMBER )
    (7) expression -> . FUNC_VAR ( nums_with_cln )
    (8) expression -> . DIFF_SYM ( expression )
    (9) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (10) expression -> . BUILD_IN_FUNC ( VAR )
    (11) expression -> . CONSTANTS
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression ^ expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . NUMBER
    (21) expression -> . VAR
    (22) expression -> . expression VAR

    FUNC_VAR        shift and go to state 21
    DIFF_SYM        shift and go to state 7
    INTE_SYM        shift and go to state 6
    BUILD_IN_FUNC   shift and go to state 5
    CONSTANTS       shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    NUMBER          shift and go to state 10
    VAR             shift and go to state 20

    expression                     shift and go to state 57

state 55

    (9) expression -> INTE_SYM ( expression INTE_D_DYM ) .

    +               reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    -               reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    *               reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    /               reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    ^               reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    VAR             reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    $end            reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    )               reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    INTE_D_DYM      reduce using rule 9 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)


state 56

    (4) statement -> FUNC_VAR ( VAR ) = expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    $end            reduce using rule 4 (statement -> FUNC_VAR ( VAR ) = expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 16
    ^               shift and go to state 17
    VAR             shift and go to state 12


state 57

    (5) statement -> FUNC_VAR ( vars_with_cln ) = expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . ^ expression
    (22) expression -> expression . VAR

    $end            reduce using rule 5 (statement -> FUNC_VAR ( vars_with_cln ) = expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 16
    ^               shift and go to state 17
    VAR             shift and go to state 12

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 31 resolved as shift
WARNING: shift/reduce conflict for - in state 31 resolved as shift
WARNING: shift/reduce conflict for * in state 31 resolved as shift
WARNING: shift/reduce conflict for / in state 31 resolved as shift
WARNING: shift/reduce conflict for ^ in state 31 resolved as shift
WARNING: shift/reduce conflict for VAR in state 31 resolved as shift
