
# /Users/gogo/dev/github.com/hilbert/src/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '6903C0F2DEC0ABE824375316E2F06E2B'
    
_lr_action_items = {'(':([0,1,2,5,9,10,12,13,17,18,19,20,21,23,24,25,49,50,],[1,1,16,1,23,24,26,27,1,1,1,1,1,1,1,1,1,1,]),'$end':([3,4,6,7,8,11,15,22,28,33,34,35,36,37,40,42,43,46,48,51,52,53,],[-10,-18,0,-20,-9,-19,-19,-16,-17,-12,-15,-11,-14,-13,-1,-5,-4,-6,-8,-7,-3,-2,]),'FUNC_VAR':([0,1,5,17,18,19,20,21,23,24,25,49,50,],[2,13,13,13,13,13,13,13,13,13,13,13,13,]),'NUMBER':([0,1,5,16,17,18,19,20,21,23,24,25,27,49,50,],[4,4,4,30,4,4,4,4,4,4,4,4,30,4,4,]),'VARS_WITH_CLN':([16,],[31,]),'=':([11,44,45,],[25,49,50,]),'INTE_D_DYM':([4,7,8,15,22,28,33,34,35,36,37,39,42,43,46,48,51,],[-18,-20,-9,-19,-16,-17,-12,-15,-11,-14,-13,47,-5,-4,-6,-8,-7,]),'/':([3,4,7,8,11,14,15,22,28,33,34,35,36,37,38,39,40,42,43,46,48,51,52,53,],[20,-18,-20,-9,-19,20,-19,-16,-17,20,20,20,-14,-13,20,20,20,-5,-4,-6,-8,-7,20,20,]),'+':([3,4,7,8,11,14,15,22,28,33,34,35,36,37,38,39,40,42,43,46,48,51,52,53,],[19,-18,-20,-9,-19,19,-19,-16,-17,-12,19,-11,-14,-13,19,19,19,-5,-4,-6,-8,-7,19,19,]),'NUMS_WITH_CLN':([16,27,],[29,29,]),'-':([0,1,3,4,5,7,8,11,14,15,17,18,19,20,21,22,23,24,25,28,33,34,35,36,37,38,39,40,42,43,46,48,49,50,51,52,53,],[5,5,17,-18,5,-20,-9,-19,17,-19,5,5,5,5,5,-16,5,5,5,-17,-12,17,-11,-14,-13,17,17,17,-5,-4,-6,-8,5,5,-7,17,17,]),'^':([3,4,7,8,11,14,15,22,28,33,34,35,36,37,38,39,40,42,43,46,48,51,52,53,],[18,-18,-20,-9,-19,18,-19,-16,-17,-12,18,-11,-14,-13,18,18,18,-5,-4,-6,-8,-7,18,18,]),'*':([3,4,7,8,11,14,15,22,28,33,34,35,36,37,38,39,40,42,43,46,48,51,52,53,],[21,-18,-20,-9,-19,21,-19,-16,-17,21,21,21,-14,-13,21,21,21,-5,-4,-6,-8,-7,21,21,]),'CONSTANTS':([0,1,5,17,18,19,20,21,23,24,25,49,50,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'DIFF_SYM':([0,1,5,17,18,19,20,21,23,24,25,49,50,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'INTE_SYM':([0,1,5,17,18,19,20,21,23,24,25,49,50,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'VAR':([0,1,5,16,17,18,19,20,21,23,24,25,26,49,50,],[11,15,15,32,15,15,15,15,15,15,15,15,41,15,15,]),')':([4,7,8,14,15,22,28,29,30,31,32,33,34,35,36,37,38,41,42,43,46,47,48,51,],[-18,-20,-9,28,-19,-16,-17,42,43,44,45,-12,-15,-11,-14,-13,46,48,-5,-4,-6,51,-8,-7,]),'VAR_MULTI':([0,1,5,17,18,19,20,21,23,24,25,49,50,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'BUILD_IN_FUNC':([0,1,5,17,18,19,20,21,23,24,25,49,50,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[6,]),'expression':([0,1,5,17,18,19,20,21,23,24,25,49,50,],[3,14,22,33,34,35,36,37,38,39,40,52,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR = expression','statement',3,'p_statement_assign','h_parser.py',22),
  ('statement -> FUNC_VAR ( VAR ) = expression','statement',6,'p_statement_def_func','h_parser.py',26),
  ('statement -> FUNC_VAR ( VARS_WITH_CLN ) = expression','statement',6,'p_statement_def_func2','h_parser.py',30),
  ('expression -> FUNC_VAR ( NUMBER )','expression',4,'p_statement_eval_func','h_parser.py',34),
  ('expression -> FUNC_VAR ( NUMS_WITH_CLN )','expression',4,'p_statement_eval_func2','h_parser.py',39),
  ('expression -> DIFF_SYM ( expression )','expression',4,'p_expression_diff_func','h_parser.py',44),
  ('expression -> INTE_SYM ( expression INTE_D_DYM )','expression',5,'p_expression_inte_func','h_parser.py',48),
  ('expression -> BUILD_IN_FUNC ( VAR )','expression',4,'p_expression_build_in_func','h_parser.py',53),
  ('expression -> CONSTANTS','expression',1,'p_expression_constants','h_parser.py',58),
  ('statement -> expression','statement',1,'p_statement_expr','h_parser.py',62),
  ('expression -> expression + expression','expression',3,'p_expression_binop','h_parser.py',66),
  ('expression -> expression - expression','expression',3,'p_expression_binop','h_parser.py',67),
  ('expression -> expression * expression','expression',3,'p_expression_binop','h_parser.py',68),
  ('expression -> expression / expression','expression',3,'p_expression_binop','h_parser.py',69),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','h_parser.py',70),
  ('expression -> - expression','expression',2,'p_expression_uminus','h_parser.py',78),
  ('expression -> ( expression )','expression',3,'p_expression_group','h_parser.py',82),
  ('expression -> NUMBER','expression',1,'p_expression_number','h_parser.py',86),
  ('expression -> VAR','expression',1,'p_expression_var','h_parser.py',90),
  ('expression -> VAR_MULTI','expression',1,'p_expression_var_multi','h_parser.py',94),
]
