Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR = expression
Rule 2     statement -> FUNC_VAR ( VAR ) = expression
Rule 3     expression -> FUNC_VAR ( NUMBER )
Rule 4     expression -> DIFF_SYM ( expression )
Rule 5     expression -> INTE_SYM ( expression INTE_D_DYM )
Rule 6     statement -> expression
Rule 7     expression -> expression + expression
Rule 8     expression -> expression - expression
Rule 9     expression -> expression * expression
Rule 10    expression -> expression / expression
Rule 11    expression -> expression ^ expression
Rule 12    expression -> - expression
Rule 13    expression -> ( expression )
Rule 14    expression -> NUMBER
Rule 15    expression -> VAR
Rule 16    expression -> VAR_MULTI

Terminals, with rules where they appear

(                    : 2 3 4 5 13
)                    : 2 3 4 5 13
*                    : 9
+                    : 7
-                    : 8 12
/                    : 10
=                    : 1 2
DIFF_SYM             : 4
FUNC_VAR             : 2 3
INTE_D_DYM           : 5
INTE_SYM             : 5
NUMBER               : 3 14
VAR                  : 1 2 15
VAR_MULTI            : 16
^                    : 11
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 4 5 6 7 7 8 8 9 9 10 10 11 11 12 13
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR = expression
    (2) statement -> . FUNC_VAR ( VAR ) = expression
    (6) statement -> . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    VAR             shift and go to state 2
    FUNC_VAR        shift and go to state 9
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 1
    statement                      shift and go to state 3

state 1

    (6) statement -> expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    $end            reduce using rule 6 (statement -> expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 11
    /               shift and go to state 14
    ^               shift and go to state 12


state 2

    (1) statement -> VAR . = expression
    (15) expression -> VAR .

    =               shift and go to state 16
    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    ^               reduce using rule 15 (expression -> VAR .)
    $end            reduce using rule 15 (expression -> VAR .)


state 3

    (0) S' -> statement .



state 4

    (12) expression -> - . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 17

state 5

    (5) expression -> INTE_SYM . ( expression INTE_D_DYM )

    (               shift and go to state 20


state 6

    (4) expression -> DIFF_SYM . ( expression )

    (               shift and go to state 21


state 7

    (13) expression -> ( . expression )
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 22

state 8

    (14) expression -> NUMBER .

    +               reduce using rule 14 (expression -> NUMBER .)
    -               reduce using rule 14 (expression -> NUMBER .)
    *               reduce using rule 14 (expression -> NUMBER .)
    /               reduce using rule 14 (expression -> NUMBER .)
    ^               reduce using rule 14 (expression -> NUMBER .)
    $end            reduce using rule 14 (expression -> NUMBER .)
    )               reduce using rule 14 (expression -> NUMBER .)
    INTE_D_DYM      reduce using rule 14 (expression -> NUMBER .)


state 9

    (2) statement -> FUNC_VAR . ( VAR ) = expression
    (3) expression -> FUNC_VAR . ( NUMBER )

    (               shift and go to state 23


state 10

    (16) expression -> VAR_MULTI .

    +               reduce using rule 16 (expression -> VAR_MULTI .)
    -               reduce using rule 16 (expression -> VAR_MULTI .)
    *               reduce using rule 16 (expression -> VAR_MULTI .)
    /               reduce using rule 16 (expression -> VAR_MULTI .)
    ^               reduce using rule 16 (expression -> VAR_MULTI .)
    $end            reduce using rule 16 (expression -> VAR_MULTI .)
    )               reduce using rule 16 (expression -> VAR_MULTI .)
    INTE_D_DYM      reduce using rule 16 (expression -> VAR_MULTI .)


state 11

    (9) expression -> expression * . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 24

state 12

    (11) expression -> expression ^ . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 25

state 13

    (8) expression -> expression - . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 26

state 14

    (10) expression -> expression / . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 27

state 15

    (7) expression -> expression + . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 28

state 16

    (1) statement -> VAR = . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 29

state 17

    (12) expression -> - expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    +               reduce using rule 12 (expression -> - expression .)
    -               reduce using rule 12 (expression -> - expression .)
    *               reduce using rule 12 (expression -> - expression .)
    /               reduce using rule 12 (expression -> - expression .)
    ^               reduce using rule 12 (expression -> - expression .)
    $end            reduce using rule 12 (expression -> - expression .)
    )               reduce using rule 12 (expression -> - expression .)
    INTE_D_DYM      reduce using rule 12 (expression -> - expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 14 ]
  ! ^               [ shift and go to state 12 ]


state 18

    (15) expression -> VAR .

    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    ^               reduce using rule 15 (expression -> VAR .)
    $end            reduce using rule 15 (expression -> VAR .)
    )               reduce using rule 15 (expression -> VAR .)
    INTE_D_DYM      reduce using rule 15 (expression -> VAR .)


state 19

    (3) expression -> FUNC_VAR . ( NUMBER )

    (               shift and go to state 30


state 20

    (5) expression -> INTE_SYM ( . expression INTE_D_DYM )
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 31

state 21

    (4) expression -> DIFF_SYM ( . expression )
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 32

state 22

    (13) expression -> ( expression . )
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    )               shift and go to state 33
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 11
    /               shift and go to state 14
    ^               shift and go to state 12


state 23

    (2) statement -> FUNC_VAR ( . VAR ) = expression
    (3) expression -> FUNC_VAR ( . NUMBER )

    VAR             shift and go to state 35
    NUMBER          shift and go to state 34


state 24

    (9) expression -> expression * expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    +               reduce using rule 9 (expression -> expression * expression .)
    -               reduce using rule 9 (expression -> expression * expression .)
    *               reduce using rule 9 (expression -> expression * expression .)
    /               reduce using rule 9 (expression -> expression * expression .)
    ^               reduce using rule 9 (expression -> expression * expression .)
    $end            reduce using rule 9 (expression -> expression * expression .)
    )               reduce using rule 9 (expression -> expression * expression .)
    INTE_D_DYM      reduce using rule 9 (expression -> expression * expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 14 ]
  ! ^               [ shift and go to state 12 ]


state 25

    (11) expression -> expression ^ expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    $end            reduce using rule 11 (expression -> expression ^ expression .)
    )               reduce using rule 11 (expression -> expression ^ expression .)
    INTE_D_DYM      reduce using rule 11 (expression -> expression ^ expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 11
    /               shift and go to state 14
    ^               shift and go to state 12

  ! +               [ reduce using rule 11 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression ^ expression .) ]
  ! ^               [ reduce using rule 11 (expression -> expression ^ expression .) ]


state 26

    (8) expression -> expression - expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    +               reduce using rule 8 (expression -> expression - expression .)
    -               reduce using rule 8 (expression -> expression - expression .)
    ^               reduce using rule 8 (expression -> expression - expression .)
    $end            reduce using rule 8 (expression -> expression - expression .)
    )               reduce using rule 8 (expression -> expression - expression .)
    INTE_D_DYM      reduce using rule 8 (expression -> expression - expression .)
    *               shift and go to state 11
    /               shift and go to state 14

  ! *               [ reduce using rule 8 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! ^               [ shift and go to state 12 ]


state 27

    (10) expression -> expression / expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    +               reduce using rule 10 (expression -> expression / expression .)
    -               reduce using rule 10 (expression -> expression / expression .)
    *               reduce using rule 10 (expression -> expression / expression .)
    /               reduce using rule 10 (expression -> expression / expression .)
    ^               reduce using rule 10 (expression -> expression / expression .)
    $end            reduce using rule 10 (expression -> expression / expression .)
    )               reduce using rule 10 (expression -> expression / expression .)
    INTE_D_DYM      reduce using rule 10 (expression -> expression / expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 14 ]
  ! ^               [ shift and go to state 12 ]


state 28

    (7) expression -> expression + expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    +               reduce using rule 7 (expression -> expression + expression .)
    -               reduce using rule 7 (expression -> expression + expression .)
    ^               reduce using rule 7 (expression -> expression + expression .)
    $end            reduce using rule 7 (expression -> expression + expression .)
    )               reduce using rule 7 (expression -> expression + expression .)
    INTE_D_DYM      reduce using rule 7 (expression -> expression + expression .)
    *               shift and go to state 11
    /               shift and go to state 14

  ! *               [ reduce using rule 7 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 13 ]
  ! ^               [ shift and go to state 12 ]


state 29

    (1) statement -> VAR = expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    $end            reduce using rule 1 (statement -> VAR = expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 11
    /               shift and go to state 14
    ^               shift and go to state 12


state 30

    (3) expression -> FUNC_VAR ( . NUMBER )

    NUMBER          shift and go to state 34


state 31

    (5) expression -> INTE_SYM ( expression . INTE_D_DYM )
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    INTE_D_DYM      shift and go to state 36
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 11
    /               shift and go to state 14
    ^               shift and go to state 12


state 32

    (4) expression -> DIFF_SYM ( expression . )
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    )               shift and go to state 37
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 11
    /               shift and go to state 14
    ^               shift and go to state 12


state 33

    (13) expression -> ( expression ) .

    +               reduce using rule 13 (expression -> ( expression ) .)
    -               reduce using rule 13 (expression -> ( expression ) .)
    *               reduce using rule 13 (expression -> ( expression ) .)
    /               reduce using rule 13 (expression -> ( expression ) .)
    ^               reduce using rule 13 (expression -> ( expression ) .)
    $end            reduce using rule 13 (expression -> ( expression ) .)
    )               reduce using rule 13 (expression -> ( expression ) .)
    INTE_D_DYM      reduce using rule 13 (expression -> ( expression ) .)


state 34

    (3) expression -> FUNC_VAR ( NUMBER . )

    )               shift and go to state 38


state 35

    (2) statement -> FUNC_VAR ( VAR . ) = expression

    )               shift and go to state 39


state 36

    (5) expression -> INTE_SYM ( expression INTE_D_DYM . )

    )               shift and go to state 40


state 37

    (4) expression -> DIFF_SYM ( expression ) .

    +               reduce using rule 4 (expression -> DIFF_SYM ( expression ) .)
    -               reduce using rule 4 (expression -> DIFF_SYM ( expression ) .)
    *               reduce using rule 4 (expression -> DIFF_SYM ( expression ) .)
    /               reduce using rule 4 (expression -> DIFF_SYM ( expression ) .)
    ^               reduce using rule 4 (expression -> DIFF_SYM ( expression ) .)
    $end            reduce using rule 4 (expression -> DIFF_SYM ( expression ) .)
    )               reduce using rule 4 (expression -> DIFF_SYM ( expression ) .)
    INTE_D_DYM      reduce using rule 4 (expression -> DIFF_SYM ( expression ) .)


state 38

    (3) expression -> FUNC_VAR ( NUMBER ) .

    +               reduce using rule 3 (expression -> FUNC_VAR ( NUMBER ) .)
    -               reduce using rule 3 (expression -> FUNC_VAR ( NUMBER ) .)
    *               reduce using rule 3 (expression -> FUNC_VAR ( NUMBER ) .)
    /               reduce using rule 3 (expression -> FUNC_VAR ( NUMBER ) .)
    ^               reduce using rule 3 (expression -> FUNC_VAR ( NUMBER ) .)
    $end            reduce using rule 3 (expression -> FUNC_VAR ( NUMBER ) .)
    )               reduce using rule 3 (expression -> FUNC_VAR ( NUMBER ) .)
    INTE_D_DYM      reduce using rule 3 (expression -> FUNC_VAR ( NUMBER ) .)


state 39

    (2) statement -> FUNC_VAR ( VAR ) . = expression

    =               shift and go to state 41


state 40

    (5) expression -> INTE_SYM ( expression INTE_D_DYM ) .

    +               reduce using rule 5 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    -               reduce using rule 5 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    *               reduce using rule 5 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    /               reduce using rule 5 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    ^               reduce using rule 5 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    $end            reduce using rule 5 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    )               reduce using rule 5 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)
    INTE_D_DYM      reduce using rule 5 (expression -> INTE_SYM ( expression INTE_D_DYM ) .)


state 41

    (2) statement -> FUNC_VAR ( VAR ) = . expression
    (3) expression -> . FUNC_VAR ( NUMBER )
    (4) expression -> . DIFF_SYM ( expression )
    (5) expression -> . INTE_SYM ( expression INTE_D_DYM )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . expression ^ expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . NUMBER
    (15) expression -> . VAR
    (16) expression -> . VAR_MULTI

    FUNC_VAR        shift and go to state 19
    DIFF_SYM        shift and go to state 6
    INTE_SYM        shift and go to state 5
    -               shift and go to state 4
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    VAR             shift and go to state 18
    VAR_MULTI       shift and go to state 10

    expression                     shift and go to state 42

state 42

    (2) statement -> FUNC_VAR ( VAR ) = expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression
    (11) expression -> expression . ^ expression

    $end            reduce using rule 2 (statement -> FUNC_VAR ( VAR ) = expression .)
    +               shift and go to state 15
    -               shift and go to state 13
    *               shift and go to state 11
    /               shift and go to state 14
    ^               shift and go to state 12

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 25 resolved as shift
WARNING: shift/reduce conflict for - in state 25 resolved as shift
WARNING: shift/reduce conflict for * in state 25 resolved as shift
WARNING: shift/reduce conflict for / in state 25 resolved as shift
WARNING: shift/reduce conflict for ^ in state 25 resolved as shift
