
# /Users/gogo/dev/remote/github/Hilbert/core/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = 'CEF5ACB92187D412124DD4FA988B6207'
    
_lr_action_items = {'FUNC_VARS':([1,],[10,]),'f':([0,4,7,12,16,18,19,20,21,22,],[1,13,13,13,13,13,13,13,13,13,]),'DIFF_SYM':([0,4,7,12,16,18,19,20,21,22,],[2,2,2,2,2,2,2,2,2,2,]),')':([5,8,11,14,15,17,23,24,26,27,28,29,31,],[-12,-14,-4,24,-13,-10,31,-11,-8,-9,-7,-6,-3,]),'(':([0,2,4,7,12,16,18,19,20,21,22,],[4,12,4,4,4,4,4,4,4,4,4,]),'VAR_MULTI':([0,4,7,12,16,18,19,20,21,22,],[8,8,8,8,8,8,8,8,8,8,]),'*':([5,6,8,9,11,14,15,17,23,24,25,26,27,28,29,30,31,],[-12,-13,-14,18,-4,18,-13,-10,18,-11,18,-8,-9,18,18,18,-3,]),'$end':([3,5,6,8,9,11,15,17,24,25,26,27,28,29,30,31,],[0,-12,-13,-14,-5,-4,-13,-10,-11,-1,-8,-9,-7,-6,-2,-3,]),'NUMBER':([0,4,7,12,16,18,19,20,21,22,],[5,5,5,5,5,5,5,5,5,5,]),'VAR':([0,4,7,12,16,18,19,20,21,22,],[6,15,15,15,15,15,15,15,15,15,]),'-':([0,4,5,6,7,8,9,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[7,7,-12,-13,7,-14,20,-4,7,20,-13,7,-10,7,7,7,7,7,20,-11,20,-8,-9,-7,-6,20,-3,]),'+':([5,6,8,9,11,14,15,17,23,24,25,26,27,28,29,30,31,],[-12,-13,-14,21,-4,21,-13,-10,21,-11,21,-8,-9,-7,-6,21,-3,]),'/':([5,6,8,9,11,14,15,17,23,24,25,26,27,28,29,30,31,],[-12,-13,-14,19,-4,19,-13,-10,19,-11,19,-8,-9,19,19,19,-3,]),'=':([6,10,],[16,22,]),'FUNC_SUBS':([1,13,],[11,11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[3,]),'expression':([0,4,7,12,16,18,19,20,21,22,],[9,14,17,23,25,26,27,28,29,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR = expression','statement',3,'p_statement_assign','h_parser.py',21),
  ('statement -> f FUNC_VARS = expression','statement',4,'p_statement_def_func','h_parser.py',25),
  ('expression -> DIFF_SYM ( expression )','expression',4,'p_expression_diff_func','h_parser.py',29),
  ('expression -> f FUNC_SUBS','expression',2,'p_statement_eval_func','h_parser.py',33),
  ('statement -> expression','statement',1,'p_statement_expr','h_parser.py',39),
  ('expression -> expression + expression','expression',3,'p_expression_binop','h_parser.py',43),
  ('expression -> expression - expression','expression',3,'p_expression_binop','h_parser.py',44),
  ('expression -> expression * expression','expression',3,'p_expression_binop','h_parser.py',45),
  ('expression -> expression / expression','expression',3,'p_expression_binop','h_parser.py',46),
  ('expression -> - expression','expression',2,'p_expression_uminus','h_parser.py',53),
  ('expression -> ( expression )','expression',3,'p_expression_group','h_parser.py',57),
  ('expression -> NUMBER','expression',1,'p_expression_number','h_parser.py',61),
  ('expression -> VAR','expression',1,'p_expression_var','h_parser.py',65),
  ('expression -> VAR_MULTI','expression',1,'p_expression_var_multi','h_parser.py',69),
]
